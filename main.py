#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# MultiBotX ‚Äî consolidated, tested version (part 1/4)

import os
import logging
import random
import re
import json
import tempfile
import shutil
import asyncio
import uuid
from datetime import datetime, timedelta
from threading import Thread
from pathlib import Path

import requests
import yt_dlp
from flask import Flask
from dotenv import load_dotenv

from telegram import (
    Update,
    BotCommand,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ChatPermissions,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)

# Load local .env for dev; on Render environment variables used automatically
load_dotenv()

# ---------------- Config ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
SAVE_TUBE_KEY = os.getenv("SAVE_TUBE_KEY")      # optional (RapidAPI for SaveTube)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")    # optional
ADMIN_ID = os.getenv("ADMIN_ID")                # optional admin id (string)
MAX_SEND_BYTES = int(os.getenv("MAX_SEND_BYTES", 50 * 1024 * 1024))  # default 50MB
COMMANDS_SETUP = os.getenv("COMMANDS_SETUP", "true").lower() in ("1", "true", "yes")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# ---------------- Logging ----------------
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("MultiBotX")

# ---------------- Flask health ----------------
app = Flask(__name__)

@app.route("/", methods=["GET"])
def health():
    return "MultiBotX is running"

# ---------------- Application (PTB) ----------------
# build application now (we will register handlers later)
application = ApplicationBuilder().token(BOT_TOKEN).build()# MultiBotX ‚Äî part 2/4: storage, content pools, helpers

# ---------------- Storage ----------------
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)
DONKE_FILE = DATA_DIR / "donke.json"
SETTINGS_FILE = DATA_DIR / "settings.json"

def load_json(path: Path):
    try:
        if path.exists():
            return json.loads(path.read_text(encoding="utf-8"))
    except Exception:
        logger.exception("load_json failed: %s", path)
    return {}

def save_json(path: Path, data):
    try:
        path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        logger.exception("save_json failed: %s", path)

donke_db = load_json(DONKE_FILE)
settings = load_json(SETTINGS_FILE) or {}
# default: antimat disabled
if "antimat_enabled" not in settings:
    settings["antimat_enabled"] = False
    save_json(SETTINGS_FILE, settings)

# ---------------- Content pools ----------------
JOKES = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? OCT 31 == DEC 25.",
    "–Ø –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª —à—É—Ç–∫—É –ø—Ä–æ UDP ‚Äî –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω, –¥–æ—à–ª–∞ –ª–∏ –æ–Ω–∞.",
    "Debugging: –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –±–∞–≥–æ–≤ –≤ —Ñ–∏—á–∏.",
]
DONKE_JOKES = [
    "Donke –ø—Ä–∏—à—ë–ª –∏ –≤—Å—ë –ø–æ–º–µ–Ω—è–ª ‚Äî –≤ —Ö–æ—Ä–æ—à–µ–º —Å–º—ã—Å–ª–µ... –∏–Ω–æ–≥–¥–∞.",
    "Donke –ª–µ–≥–µ–Ω–¥–∞, Donke –º–µ–º.",
    "Donke ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –∏ —Å–ª–µ–¥—Å—Ç–≤–∏–µ.",
]
FACTS = [
    "–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–ö–æ—à–∫–∏ —Å–ø—è—Ç –¥–æ 20 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.",
    "–ú—ë–¥ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è.",
]
QUOTES = [
    "¬´–î–µ–ª–∞–π, —á—Ç–æ –¥–æ–ª–∂–µ–Ω.¬ª",
    "¬´–õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –∏ –ø–æ–∂–∞–ª–µ—Ç—å, —á–µ–º –Ω–µ —Å–¥–µ–ª–∞—Ç—å –∏ –∂–∞–ª–µ—Ç—å.¬ª",
]

BAD_WORDS = ["–±–ª—è–¥", "—Ö—É–π", "–ø–∏–∑–¥", "—Å—É–∫–∞", "–º—Ä–∞–∑"]  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

# ---------------- Helpers ----------------
def today_iso():
    return datetime.utcnow().date().isoformat()

async def run_blocking(func, *args, **kwargs):
    """Run blocking function in thread pool to avoid blocking the event loop."""
    return await asyncio.to_thread(func, *args, **kwargs)

def is_admin_user(update: Update) -> bool:
    """Quick admin check: either ADMIN_ID env or chat admin."""
    try:
        if ADMIN_ID and str(update.effective_user.id) == str(ADMIN_ID):
            return True
        # if in chat, check chat rights (best-effort; may raise in private)
        chat = update.effective_chat
        if chat and chat.get_member:
            member = asyncio.get_event_loop().run_until_complete(chat.get_member(update.effective_user.id))
            if member and (member.status in ("administrator", "creator") or getattr(member, "can_restrict_members", False)):
                return True
    except Exception:
        # fall back to False
        pass
    return False

# ---------------- Download sessions store ----------------
# temporary map request_id -> {'url':url, 'user_id':id, 'chat_id':chat_id}
DOWNLOAD_SESSIONS = {}# MultiBotX ‚Äî part 3/4: core handlers (start/help/entertainment/donke/moderation/antimat)

# ---------- Basic / Menu ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="menu_fun")],
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="menu_download")],
        [InlineKeyboardButton("üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="menu_mod")],
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø MultiBotX. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã</b>\n\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: /joke /fact /quote /cat /dog /meme /dice\n"
        "Donke: /donke /camdonke /topdonke\n"
        "–í–∏–¥–µ–æ: –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ /download <url>\n"
        "–ú–æ–¥–µ—Ä–∞—Ü–∏—è: –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –±–µ–∑ '/': '–≤–∞—Ä–Ω','–º—É—Ç','–±–∞–Ω','—Ä–∞–∑–º—É—Ç','–∞–Ω–±–∞–Ω'\n"
        "/antimat_on | /antimat_off ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-–º–∞—Ç (–∞–¥–º–∏–Ω)\n"
        "/stats ‚Äî –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)\n"
    )
    await update.message.reply_text(text, parse_mode="HTML")

# ---------- Entertainment ----------
async def joke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(JOKES))

async def fact_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(FACTS))

async def quote_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(QUOTES))

async def meme_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        r = await run_blocking(requests.get, "https://meme-api.com/gimme", timeout=10)
        j = r.json()
        url = j.get("url")
        title = j.get("title", "–ú–µ–º")
        if url:
            await update.message.reply_photo(url, caption=title)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º.")
    except Exception:
        logger.exception("meme_cmd failed")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞.")

async def cat_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        r = await run_blocking(requests.get, "https://api.thecatapi.com/v1/images/search", timeout=10)
        j = r.json()
        if isinstance(j, list) and j:
            await update.message.reply_photo(j[0]["url"])
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∞.")
    except Exception:
        logger.exception("cat_cmd failed")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∞.")

async def dog_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        r = await run_blocking(requests.get, "https://dog.ceo/api/breeds/image/random", timeout=10)
        j = r.json()
        await update.message.reply_photo(j.get("message"))
    except Exception:
        logger.exception("dog_cmd failed")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–∞–∫–∏.")

async def dice_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_dice()

# ---------- Donke ----------
async def donke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(DONKE_JOKES))

async def camdonke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)
    entry = donke_db.get(uid, {"name": user.full_name, "total": 0, "last": None})
    if entry.get("last") == today_iso():
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–ª–∏–≤–∞–ª–∏ ‚Äî –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
        return
    amount = random.randint(1, 100)
    entry["total"] = entry.get("total", 0) + amount
    entry["last"] = today_iso()
    entry["name"] = user.full_name
    donke_db[uid] = entry
    save_json(DONKE_FILE, donke_db)
    await update.message.reply_text(f"üí¶ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏–ª–∏ –≤ Donke {amount} –ª. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")

async def topdonke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not donke_db:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ª–∏–≤–∞–ª.")
        return
    lst = sorted(donke_db.items(), key=lambda kv: kv[1].get("total", 0), reverse=True)[:50]
    lines = []
    for i, (uid, info) in enumerate(lst, 1):
        name = info.get("name", f"@{uid}")
        total = info.get("total", 0)
        lines.append(f"{i}. {name} ‚Äî {total} –ª")
    await update.message.reply_text("\n".join(lines))

# ---------- Moderation commands (slash) ----------
async def warn_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    target = update.message.reply_to_message.from_user
    warns = context.bot_data.get("warns", {})
    warns[target.id] = warns.get(target.id, 0) + 1
    context.bot_data["warns"] = warns
    await update.message.reply_text(f"‚ö†Ô∏è {target.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warns[target.id]}).")
    if warns[target.id] >= 3:
        try:
            await update.effective_chat.ban_member(target.id)
            await update.message.reply_text("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω (3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è).")
            warns[target.id] = 0
            context.bot_data["warns"] = warns
        except Exception:
            await update.message.reply_text("–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

async def mute_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å.")
    target = update.message.reply_to_message.from_user
    try:
        until = datetime.utcnow() + timedelta(minutes=30)
        await update.effective_chat.restrict_member(target.id, permissions=ChatPermissions(can_send_messages=False), until_date=until)
        await update.message.reply_text(f"üîá {target.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç.")
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

async def unmute_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º—É—Ç–∏—Ç—å.")
    target = update.message.reply_to_message.from_user
    try:
        await update.effective_chat.restrict_member(target.id, permissions=ChatPermissions(can_send_messages=True))
        await update.message.reply_text(f"üîä {target.full_name} —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—á–∏—Ç—å ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

async def ban_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å.")
    target = update.message.reply_to_message.from_user
    try:
        await update.effective_chat.ban_member(target.id)
        await update.message.reply_text(f"üö´ {target.full_name} –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

async def unban_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–±–∞–Ω–∏—Ç—å.")
    target = update.message.reply_to_message.from_user
    try:
        await update.effective_chat.unban_member(target.id)
        await update.message.reply_text(f"‚úÖ {target.full_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

# ---------- Reply-moderation without slash ----------
async def reply_moderation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.reply_to_message or not update.message.text:
        return
    txt = update.message.text.lower().strip()
    if txt in ("–≤–∞—Ä–Ω", "warn"):
        await warn_cmd(update, context)
    elif txt in ("–º—É—Ç", "mute"):
        await mute_cmd(update, context)
    elif txt in ("—Ä–∞–∑–º—É—Ç", "–∞–Ω–º—É—Ç", "unmute"):
        await unmute_cmd(update, context)
    elif txt in ("–±–∞–Ω", "ban"):
        await ban_cmd(update, context)
    elif txt in ("—Ä–∞–∑–±–∞–Ω", "–∞–Ω–±–∞–Ω", "—É–Ω–±–∞–Ω", "unban"):
        await unban_cmd(update, context)

# ---------- Antimat toggle ----------
async def antimat_on_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin_user(update):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∞–Ω—Ç–∏-–º–∞—Ç.")
    settings["antimat_enabled"] = True
    save_json(SETTINGS_FILE, settings)
    await update.message.reply_text("–ê–Ω—Ç–∏-–º–∞—Ç –≤–∫–ª—é—á—ë–Ω.")

async def antimat_off_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin_user(update):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç—å –∞–Ω—Ç–∏-–º–∞—Ç.")
    settings["antimat_enabled"] = False
    save_json(SETTINGS_FILE, settings)
    await update.message.reply_text("–ê–Ω—Ç–∏-–º–∞—Ç –≤—ã–∫–ª—é—á—ë–Ω.")# MultiBotX ‚Äî part 4/4: downloads (yt_dlp), callback handling, AI, registration, main

# ---------- yt_dlp helpers ----------
YTDL_OPTS_BASE = {
    "noplaylist": True,
    "quiet": True,
    "no_warnings": True,
}

def yt_download_sync(url: str, audio: bool = False) -> str:
    """Blocking download via yt_dlp. Returns path to downloaded file."""
    tmpdir = tempfile.mkdtemp(prefix="multibotx_")
    opts = YTDL_OPTS_BASE.copy()
    if audio:
        # prefer best audio; try mp3 extraction if ffmpeg present
        opts["format"] = "bestaudio/best"
        # attempt to extract to mp3 if ffmpeg exists
        opts["outtmpl"] = os.path.join(tmpdir, "%(id)s.%(ext)s")
        opts["postprocessors"] = [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }]
    else:
        opts["format"] = "mp4[ext=mp4]/best"
        opts["outtmpl"] = os.path.join(tmpdir, "%(id)s.%(ext)s")
    with yt_dlp.YoutubeDL(opts) as ydl:
        info = ydl.extract_info(url, download=True)
        filename = ydl.prepare_filename(info)
        # If postprocessor changed extension to mp3, find mp3 file
        if audio:
            # look for mp3 file (postprocessor may produce .mp3)
            base = os.path.splitext(filename)[0]
            possible = [base + ".mp3", filename]
            for p in possible:
                if os.path.exists(p):
                    return p
        return filename

# ---------- Download flow ----------
async def prompt_download_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Triggered on plain message with URL or /download <url>"""
    text = None
    if context.args:
        text = context.args[0]
    elif update.message and update.message.text:
        m = re.search(r"https?://\S+", update.message.text)
        if m:
            text = m.group(0)
    if not text:
        return
    # create session id, store url with requesting user
    req_id = str(uuid.uuid4())
    DOWNLOAD_SESSIONS[req_id] = {
        "url": text,
        "user_id": update.effective_user.id,
        "chat_id": update.effective_chat.id if update.effective_chat else None,
    }
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data=f"dl|{req_id}|video"),
         InlineKeyboardButton("üîä –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", callback_data=f"dl|{req_id}|audio")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"dl|{req_id}|cancel")]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=kb)

async def download_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data:
        return
    await query.answer()  # acknowledge quickly
    try:
        parts = query.data.split("|")
        if len(parts) != 3:
            return await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        _prefix, req_id, action = parts
        session = DOWNLOAD_SESSIONS.pop(req_id, None)
        if not session:
            return await query.edit_message_text("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.")
        if session.get("user_id") != query.from_user.id:
            return await query.edit_message_text("–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏–π —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç.")
        url = session.get("url")
        msg = await query.edit_message_text("‚è¨ –°–∫–∞—á–∏–≤–∞—é ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
        # download
        if action == "cancel":
            return await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        audio = (action == "audio")
        try:
            fname = await run_blocking(yt_download_sync, url, audio)
        except Exception:
            logger.exception("yt_dlp failed")
            return await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ (yt_dlp).")
        size = os.path.getsize(fname) if os.path.exists(fname) else 0
        if size > MAX_SEND_BYTES:
            # cleanup and send link
            try:
                os.remove(fname)
                shutil.rmtree(os.path.dirname(fname), ignore_errors=True)
            except Exception:
                pass
            await query.edit_message_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –Ø –æ—Å—Ç–∞–≤–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫.")
            await context.bot.send_message(chat_id=session.get("chat_id"), text=f"–ò—Å—Ç–æ—á–Ω–∏–∫: {url}")
            return
        # send file
        try:
            with open(fname, "rb") as f:
                if audio:
                    await context.bot.send_audio(chat_id=session.get("chat_id"), audio=f)
                else:
                    await context.bot.send_video(chat_id=session.get("chat_id"), video=f)
        finally:
            try:
                os.remove(fname)
                shutil.rmtree(os.path.dirname(fname), ignore_errors=True)
            except Exception:
                pass
        await query.edit_message_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception:
        logger.exception("download_callback_handler error")
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except Exception:
            pass

# ---------- AI command (optional) ----------
OPENAI_CHAT_URL = "https://api.openai.com/v1/chat/completions"

def call_openai(prompt: str, model: str = "gpt-3.5-turbo", max_tokens: int = 512) -> str:
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY not set")
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
    payload = {"model": model, "messages": [{"role": "user", "content": prompt}], "max_tokens": max_tokens, "temperature": 0.8}
    r = requests.post(OPENAI_CHAT_URL, headers=headers, json=payload, timeout=30)
    r.raise_for_status()
    j = r.json()
    return j["choices"][0]["message"]["content"].strip()

async def ai_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not OPENAI_API_KEY:
        return await update.message.reply_text("AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å OPENAI_API_KEY.")
    prompt = " ".join(context.args) if context.args else ""
    if not prompt:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai <–≤–æ–ø—Ä–æ—Å>")
    await update.message.reply_text("ü§ñ –î—É–º–∞—é...")
    try:
        res = await run_blocking(call_openai, prompt)
        for i in range(0, len(res), 3900):
            await update.message.reply_text(res[i:i+3900])
    except Exception:
        logger.exception("AI call failed")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AI.")

# ---------- Stats (admin) ----------
async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if ADMIN_ID and str(update.effective_user.id) != str(ADMIN_ID):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    total = len(donke_db)
    await update.message.reply_text(f"Donke entries: {total}")

# ---------- Error handler ----------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error: %s", context.error)

# ---------- Setup bot commands on startup ----------
async def setup_bot_commands(application):
    if not COMMANDS_SETUP:
        return
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand("joke", "–®—É—Ç–∫–∞"),
        BotCommand("fact", "–§–∞–∫—Ç"),
        BotCommand("quote", "–¶–∏—Ç–∞—Ç–∞"),
        BotCommand("cat", "–§–æ—Ç–æ –∫–æ—Ç–∞"),
        BotCommand("dog", "–§–æ—Ç–æ —Å–æ–±–∞–∫–∏"),
        BotCommand("meme", "–ú–µ–º"),
        BotCommand("dice", "–ö—É–±–∏–∫"),
        BotCommand("donke", "Donke —à—É—Ç–∫–∞"),
        BotCommand("camdonke", "–ó–∞–ª–∏—Ç—å –≤ Donke"),
        BotCommand("topdonke", "–¢–æ–ø Donke"),
        BotCommand("download", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ"),
        BotCommand("ai", "AI (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"),
        BotCommand("antimat_on", "–í–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-–º–∞—Ç (–∞–¥–º–∏–Ω)"),
        BotCommand("antimat_off", "–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-–º–∞—Ç (–∞–¥–º–∏–Ω)"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
    ]
    try:
        await application.bot.set_my_commands(commands)
        logger.info("Bot commands registered.")
    except Exception:
        logger.exception("Failed to register commands.")

# ---------- Register handlers ----------
def register_handlers():
    # Commands
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("joke", joke_cmd))
    application.add_handler(CommandHandler("fact", fact_cmd))
    application.add_handler(CommandHandler("quote", quote_cmd))
    application.add_handler(CommandHandler("meme", meme_cmd))
    application.add_handler(CommandHandler("cat", cat_cmd))
    application.add_handler(CommandHandler("dog", dog_cmd))
    application.add_handler(CommandHandler("dice", dice_cmd))
    application.add_handler(CommandHandler("donke", donke_cmd))
    application.add_handler(CommandHandler("camdonke", camdonke_cmd))
    application.add_handler(CommandHandler("topdonke", topdonke_cmd))
    application.add_handler(CommandHandler("warn", warn_cmd))
    application.add_handler(CommandHandler("mute", mute_cmd))
    application.add_handler(CommandHandler("unmute", unmute_cmd))
    application.add_handler(CommandHandler("ban", ban_cmd))
    application.add_handler(CommandHandler("unban", unban_cmd))
    application.add_handler(CommandHandler("download", prompt_download_choice))
    application.add_handler(CommandHandler("ai", ai_cmd))
    application.add_handler(CommandHandler("stats", stats_cmd))
    application.add_handler(CommandHandler("antimat_on", antimat_on_cmd))
    application.add_handler(CommandHandler("antimat_off", antimat_off_cmd))

    # Callbacks for download choices
    application.add_handler(CallbackQueryHandler(download_callback_handler, pattern=r"^dl\|"))

    # URL auto-catch
    application.add_handler(MessageHandler(filters.Regex(r"https?://"), prompt_download_choice))

    # Reply moderation (no slash)
    application.add_handler(MessageHandler(
        filters.Regex(r"^(–≤–∞—Ä–Ω|–º—É—Ç|—Ä–∞–∑–º—É—Ç|–∞–Ω–º—É—Ç|–±–∞–Ω|—Ä–∞–∑–±–∞–Ω|–∞–Ω–±–∞–Ω|—É–Ω–±–∞–Ω|warn|mute|unmute|ban|unban)$") & filters.REPLY,
        reply_moderation_handler))

    # Auto filters (anti-mat & anti-flood) ‚Äî only run if antimat enabled
    async def auto_filters_wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if settings.get("antimat_enabled", False):
            await auto_filters_inner(update, context)

    # define inner anti-flood/mat function
    LAST_MSG = {}
    async def auto_filters_inner(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message or not update.message.text:
            return
        msg = update.message
        text = msg.text.lower()
        # profanity
        for bad in BAD_WORDS:
            if bad in text:
                try:
                    await msg.delete()
                    await msg.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ä—É–≥–∞–π—Ç–µ—Å—å.")
                except Exception:
                    pass
                return
        # flood
        key = (msg.chat.id, msg.from_user.id)
        now_ts = datetime.utcnow().timestamp()
        arr = LAST_MSG.get(key, [])
        arr = [t for t in arr if now_ts - t < 10]
        arr.append(now_ts)
        LAST_MSG[key] = arr
        if len(arr) > 6:
            try:
                await msg.chat.restrict_member(msg.from_user.id, ChatPermissions(can_send_messages=False),
                                               until_date=datetime.utcnow() + timedelta(minutes=1))
                await msg.reply_text("–ê–Ω—Ç–∏—Ñ–ª—É–¥: –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É.")
            except Exception:
                pass

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, auto_filters_wrapper))

    # Error handler
    application.add_error_handler(error_handler)

# ---------- Main ----------
def main():
    register_handlers()
    # set post_init to register commands after event loop started
    async def on_startup(app):
        await setup_bot_commands(app)
    application.post_init = on_startup

    # Flask health endpoint in background thread
    flask_thread = Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000))), daemon=True)
    flask_thread.start()

    logger.info("Starting polling...")
    application.run_polling(allowed_updates=None)

if __name__ == "__main__":
    main()