#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MultiBotX ‚Äî –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª main.py
–§—É–Ω–∫—Ü–∏–∏: –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ–Ω—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ (yt_dlp), Donke, –º–æ–¥–µ—Ä–∞—Ü–∏—è,
–∞–Ω—Ç–∏-–º–∞—Ç (–≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /antimat), —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –º–µ–º—ã, –∫–æ—Ç–∏–∫–∏/—Å–æ–±–∞–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É—Ç–æ–∫ –∏ —Ç.–¥.
"""

import os
import json
import logging
import random
import re
import shutil
import tempfile
import traceback
from datetime import datetime, timedelta
from pathlib import Path
from threading import Thread
from typing import Optional

import requests
import yt_dlp
from flask import Flask
from dotenv import load_dotenv
from telegram import (
    Update,
    ChatPermissions,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# Load .env locally for development (do not commit .env)
load_dotenv()

# ---------------- Config ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")  # optional admin id
SAVETUBE_KEY = os.getenv("SAVETUBE_KEY")  # optional RapidAPI key for SaveTube
MAX_SEND_BYTES = int(os.getenv("MAX_SEND_BYTES", 50 * 1024 * 1024))  # default 50MB
COMMANDS_SETUP = os.getenv("COMMANDS_SETUP", "1") not in ("0", "false", "False")
PORT = int(os.getenv("PORT", 5000))
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME", "")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Add it to environment variables.")

# ---------------- Logging ----------------
logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s", level=logging.INFO)
logger = logging.getLogger("MultiBotX")

# ---------------- Data storage ----------------
ROOT = Path(".")
DATA_DIR = ROOT / "data"
DATA_DIR.mkdir(exist_ok=True)
DONKE_FILE = DATA_DIR / "donke.json"
JOKES_FILE = DATA_DIR / "jokes.json"
USAGE_FILE = DATA_DIR / "usage.json"
SETTINGS_FILE = DATA_DIR / "settings.json"
ERROR_LOG = DATA_DIR / "errors.log"

def load_json(p: Path):
    if p.exists():
        try:
            return json.loads(p.read_text(encoding="utf-8"))
        except Exception:
            logger.exception("Failed to load JSON %s", p)
    return {}

def save_json(p: Path, data):
    try:
        p.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        logger.exception("Failed to save JSON %s", p)

donke_db = load_json(DONKE_FILE)
joke_data = load_json(JOKES_FILE)
joke_db = joke_data.get("jokes", []) if isinstance(joke_data, dict) else []
usage_db = load_json(USAGE_FILE)
settings_db = load_json(SETTINGS_FILE)

# bootstrap jokes
if not joke_db:
    joke_db = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? OCT 31 == DEC 25.",
        "–Ø –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª —à—É—Ç–∫—É –ø—Ä–æ UDP, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –µ—ë –ø–æ–ª—É—á–∏—à—å.",
        "Debugging: –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –±–∞–≥–æ–≤ –≤ —Ñ–∏—á–∏."
    ]
    save_json(JOKES_FILE, {"jokes": joke_db})

def inc_usage(key: str):
    usage_db[key] = usage_db.get(key, 0) + 1
    save_json(USAGE_FILE, usage_db)

def log_error(e: Exception):
    logger.exception(e)
    try:
        with open(ERROR_LOG, "a", encoding="utf-8") as f:
            f.write(f"{datetime.utcnow().isoformat()} - {traceback.format_exc()}\n")
    except Exception:
        pass

# ---------------- Antimat ----------------
ANTIMAT_WORDS = [
    # core expanded list (short sample; you can extend)
    "–±–ª—è–¥", "–±–ª—è–¥—å", "—Ö—É–π", "—Ö–µ—Ä", "–ø–∏–∑–¥", "–ø–∏–∑–¥–µ—Ü", "—Å—É–∫–∞", "–º—Ä–∞–∑", "–µ–±–∞–ª", "–µ–±–∞—Ç—å",
    "—Å–æ—Å–∏", "–≥–∞–Ω–¥–æ–Ω", "–º—É–¥–∞–∫", "—Ç–≤–∞—Ä—å", "–¥–æ–ª–±–æ—ë–±", "–∫—Ä–µ—Ç–∏–Ω", "–∏–¥–∏–æ—Ç"
]
if "antimat" not in settings_db:
    settings_db["antimat"] = {}  # chat_id -> bool
    save_json(SETTINGS_FILE, settings_db)

# ---------------- yt_dlp helpers ----------------
YTDL_COMMON = {
    "format": "bestvideo+bestaudio/best",
    "noplaylist": True,
    "quiet": True,
    "no_warnings": True,
    "ignoreerrors": True,
    "cachedir": False,
}

YTDL_VIDEO_OPTS = dict(YTDL_COMMON)
YTDL_VIDEO_OPTS["outtmpl"] = "%(id)s.%(ext)s"

YTDL_AUDIO_OPTS = dict(YTDL_COMMON)
YTDL_AUDIO_OPTS.update({
    "format": "bestaudio/best",
    "outtmpl": "%(id)s.%(ext)s",
    "postprocessors": [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }],
})

def yt_download(url: str, audio_only: bool = False) -> Optional[str]:
    tmpdir = tempfile.mkdtemp(prefix="mbx_")
    opts = YTDL_AUDIO_OPTS.copy() if audio_only else YTDL_VIDEO_OPTS.copy()
    opts["outtmpl"] = str(Path(tmpdir) / opts.get("outtmpl", "%(id)s.%(ext)s"))
    try:
        with yt_dlp.YoutubeDL(opts) as ydl:
            info = ydl.extract_info(url, download=True)
            if info is None:
                shutil.rmtree(tmpdir, ignore_errors=True)
                return None
            # find any file in tmpdir
            files = list(Path(tmpdir).glob("*"))
            if not files:
                shutil.rmtree(tmpdir, ignore_errors=True)
                return None
            return str(files[0])
    except Exception as e:
        log_error(e)
        shutil.rmtree(tmpdir, ignore_errors=True)
        return None

def cleanup_path(path: str):
    try:
        base = Path(path).parent
        if base.exists():
            shutil.rmtree(base, ignore_errors=True)
    except Exception:
        try:
            if os.path.exists(path):
                os.remove(path)
        except Exception:
            pass

# ---------------- Flask health ----------------
flask_app = Flask(__name__)
@flask_app.route("/", methods=["GET"])
def index():
    return "MultiBotX is running."

# ---------------- Bot commands list ----------------
BOT_COMMANDS_DETAILED = [
    ("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    ("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ("joke", "–®—É—Ç–∫–∞"),
    ("addjoke", "–î–æ–±–∞–≤–∏—Ç—å —à—É—Ç–∫—É"),
    ("donke", "Donke —à—É—Ç–∫–∞"),
    ("camdonke", "–ó–∞–ª–∏—Ç—å –≤ Donke (1x/—Å—É—Ç–∫–∏)"),
    ("topdonke", "–¢–æ–ø Donke"),
    ("meme", "–ú–µ–º"),
    ("cat", "–§–æ—Ç–æ –∫–æ—Ç–∞"),
    ("dog", "–§–æ—Ç–æ —Å–æ–±–∞–∫–∏"),
    ("dice", "–ö—É–±–∏–∫"),
    ("download", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –ø–æ —Å—Å—ã–ª–∫–µ"),
    ("searchimage", "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    ("trivia", "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"),
    ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
    ("antimat", "–í–∫–ª/–≤—ã–∫–ª –∞–Ω—Ç–∏-–º–∞—Ç (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"),
    ("motivate", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"),
    ("compliment", "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç"),
    ("remindme", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: /remindme <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç>"),
]

# ---------------- Helpers ----------------
def today_iso():
    return datetime.utcnow().date().isoformat()

def is_chat_admin(user_id: int, chat) -> bool:
    # allow ADMIN_ID, chat admin/creator
    if ADMIN_ID and str(user_id) == str(ADMIN_ID):
        return True
    try:
        member = chat.get_member(user_id)
        if member.status in ("administrator", "creator"):
            return True
    except Exception:
        pass
    return False

# ---------------- Menu UI ----------------
def main_menu_markup():
    kb = [
        [InlineKeyboardButton("üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="menu:entertain")],
        [InlineKeyboardButton("üé• –ú–µ–¥–∏–∞", callback_data="menu:media")],
        [InlineKeyboardButton("üòà Donke", callback_data="menu:donke")],
        [InlineKeyboardButton("üõ° –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="menu:moderation")],
        [InlineKeyboardButton("üîé –ü–æ–ª–µ–∑–Ω–æ–µ", callback_data="menu:useful")],
    ]
    return InlineKeyboardMarkup(kb)

# ---------------- Handlers ----------------

# Start / Menu
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("start")
    text = (
        "üëã *MultiBotX* ‚Äî –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π `/menu`)."
    )
    try:
        await update.message.reply_markdown(text, reply_markup=main_menu_markup())
    except Exception:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.")

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("menu")
    try:
        await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup())
    except Exception:
        await update.message.reply_text("–ú–µ–Ω—é: /joke /donke /download /cat /dog /meme /stats")

# Menu callbacks
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if data == "menu:entertain":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üòÇ /joke", callback_data="ent:joke"),
             InlineKeyboardButton("üí¨ /trivia", callback_data="ent:trivia")],
            [InlineKeyboardButton("üí° /motivate", callback_data="ent:motivate"),
             InlineKeyboardButton("‚ûï /addjoke", callback_data="ent:addjoke")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
        await q.edit_message_text("üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:", reply_markup=kb)
    elif data == "menu:media":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìπ –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="media:download")],
            [InlineKeyboardButton("üê± /cat", callback_data="media:cat"),
             InlineKeyboardButton("üê∂ /dog", callback_data="media:dog")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
        await q.edit_message_text("üé• –ú–µ–¥–∏–∞:", reply_markup=kb)
    elif data == "menu:donke":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üòà /donke", callback_data="donke:donke"),
             InlineKeyboardButton("üí¶ /camdonke", callback_data="donke:camdonke")],
            [InlineKeyboardButton("üèÜ /topdonke", callback_data="donke:topdonke"),
             InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
        await q.edit_message_text("Donke:", reply_markup=kb)
    elif data == "menu:moderation":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="mod:hint")],
            [InlineKeyboardButton("üßØ /antimat", callback_data="mod:antimat")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
        await q.edit_message_text("–ú–æ–¥–µ—Ä–∞—Ü–∏—è:", reply_markup=kb)
    elif data == "menu:useful":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîé /searchimage", callback_data="useful:searchimage"),
             InlineKeyboardButton("‚è∞ /remindme", callback_data="useful:remindme")],
            [InlineKeyboardButton("üìä /stats", callback_data="useful:stats"),
             InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
        await q.edit_message_text("–ü–æ–ª–µ–∑–Ω–æ–µ:", reply_markup=kb)
    elif data == "menu:back":
        await q.edit_message_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup())
    # sub callbacks (simple)
    elif data.startswith("ent:"):
        action = data.split(":", 1)[1]
        if action == "joke":
            await q.edit_message_text(random.choice(joke_db))
        elif action == "trivia":
            await q.edit_message_text("–§–∞–∫—Ç: " + random.choice(["–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ 3 —Å–µ—Ä–¥—Ü–∞.", "–ú—ë–¥ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è."]))
        elif action == "motivate":
            await q.edit_message_text(random.choice(["–î–µ–π—Å—Ç–≤—É–π!", "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ ‚Äî –±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."]))
        elif action == "addjoke":
            await q.edit_message_text("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —à—É—Ç–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /addjoke –¢–ï–ö–°–¢")
    elif data.startswith("media:"):
        action = data.split(":", 1)[1]
        if action == "download":
            await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∑–≤—É–∫.")
        elif action == "cat":
            await q.edit_message_text("–ò—Å–ø–æ–ª—å–∑—É–π /cat —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∞.")
    elif data.startswith("donke:"):
        action = data.split(":", 1)[1]
        if action == "donke":
            await q.edit_message_text(random.choice(["Donke ‚Äî –ª–µ–≥–µ–Ω–¥–∞.", "Donke forever."]))
        elif action == "camdonke":
            await q.edit_message_text("–í—ã–∑–æ–≤–∏—Ç–µ /camdonke —á—Ç–æ–±—ã –∑–∞–ª–∏—Ç—å –≤ Donke.")
        elif action == "topdonke":
            await q.edit_message_text("–í—ã–∑–æ–≤–∏—Ç–µ /topdonke —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.")
    else:
        await q.edit_message_text("–û–ø—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# ---------------- Entertainment ----------------
async def joke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("joke")
    await update.message.reply_text(random.choice(joke_db))

async def addjoke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("addjoke")
    text = " ".join(context.args) if context.args else None
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addjoke –¢–ï–ö–°–¢_–®–£–¢–ö–ò")
        return
    joke_db.append(text)
    save_json(JOKES_FILE, {"jokes": joke_db})
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ ‚Äî —à—É—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def trivia_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("trivia")
    await update.message.reply_text(random.choice(["–§–∞–∫—Ç:", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ:"]) + " " + random.choice(["–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ 3 —Å–µ—Ä–¥—Ü–∞.", "–ö–æ—à–∫–∏ —Å–ø—è—Ç –º–Ω–æ–≥–æ."]))

async def motivate_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("motivate")
    await update.message.reply_text(random.choice(["–î–µ–π—Å—Ç–≤—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.", "–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ."]))

async def compliment_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("compliment")
    await update.message.reply_text(random.choice(["–¢—ã –º–æ–ª–æ–¥–µ—Ü!", "–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–µ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞."]))

# ---------------- Images / memes ----------------
async def cat_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("cat")
    try:
        r = requests.get("https://api.thecatapi.com/v1/images/search", timeout=10).json()
        await update.message.reply_photo(r[0]["url"])
    except Exception as e:
        log_error(e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞.")

async def dog_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("dog")
    try:
        r = requests.get("https://dog.ceo/api/breeds/image/random", timeout=10).json()
        await update.message.reply_photo(r["message"])
    except Exception as e:
        log_error(e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±–∞–∫—É.")

async def meme_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("meme")
    try:
        r = requests.get("https://meme-api.com/gimme", timeout=10).json()
        await update.message.reply_photo(r["url"], caption=r.get("title", "–ú–µ–º"))
    except Exception as e:
        log_error(e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º.")

async def dice_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("dice")
    await update.message.reply_dice()

# ---------------- Donke ----------------
async def donke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("donke")
    await update.message.reply_text(random.choice(["Donke ‚Äî –ª–µ–≥–µ–Ω–¥–∞.", "Donke forever."]))

async def camdonke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("camdonke")
    user = update.effective_user
    uid = str(user.id)
    entry = donke_db.get(uid, {"name": user.full_name, "total": 0, "last": None})
    if entry.get("last") == today_iso():
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–ª–∏–≤–∞–ª–∏ ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    amount = random.randint(1, 100)
    entry["total"] = entry.get("total", 0) + amount
    entry["last"] = today_iso()
    entry["name"] = user.full_name
    donke_db[uid] = entry
    save_json(DONKE_FILE, donke_db)
    await update.message.reply_text(f"üí¶ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏–ª–∏ –≤ Donke {amount} –ª–∏—Ç—Ä–æ–≤! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")

async def topdonke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("topdonke")
    if not donke_db:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ª–∏–≤–∞–ª.")
        return
    sorted_list = sorted(donke_db.items(), key=lambda kv: kv[1].get("total", 0), reverse=True)[:50]
    lines = ["üèÜ –¢–æ–ø Donke:"]
    for i, (uid, e) in enumerate(sorted_list, 1):
        lines.append(f"{i}. {e.get('name', '?')} ‚Äî {e.get('total', 0)} –ª")
    await update.message.reply_text("\n".join(lines))

# ---------------- Moderation (reply-based) ----------------
async def moderation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.reply_to_message:
        return
    cmd = (msg.text or "").strip().lower()
    target = msg.reply_to_message.from_user
    chat = msg.chat
    try:
        member = await chat.get_member(msg.from_user.id)
        if not (member.status in ("administrator", "creator") or member.can_restrict_members):
            await msg.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return
    except Exception:
        pass
    warns = context.bot_data.setdefault("warns", {})
    if "–≤–∞—Ä–Ω" in cmd:
        warns[target.id] = warns.get(target.id, 0) + 1
        await msg.reply_text(f"‚ö†Ô∏è {target.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warns[target.id]}).")
        if warns[target.id] >= 3:
            await chat.ban_member(target.id)
            await msg.reply_text(f"üö´ {target.full_name} –∑–∞–±–∞–Ω–µ–Ω (3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è).")
            warns[target.id] = 0
    elif "–º—É—Ç" in cmd:
        until = datetime.utcnow() + timedelta(minutes=10)
        await chat.restrict_member(target.id, ChatPermissions(can_send_messages=False), until_date=until)
        await msg.reply_text(f"üîá {target.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç.")
    elif cmd in ("—Ä–∞–∑–º—É—Ç", "–∞–Ω–º—É—Ç"):
        await chat.restrict_member(target.id, ChatPermissions(can_send_messages=True))
        await msg.reply_text(f"üîä {target.full_name} —Ä–∞–∑–º—É—á–µ–Ω.")
    elif "–±–∞–Ω" in cmd:
        await chat.ban_member(target.id)
        await msg.reply_text(f"üö´ {target.full_name} –∑–∞–±–∞–Ω–µ–Ω.")
    elif cmd in ("—Ä–∞–∑–±–∞–Ω", "—É–Ω–±–∞–Ω", "–∞–Ω–±–∞–Ω"):
        await chat.unban_member(target.id)
        await msg.reply_text(f"‚úÖ {target.full_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# ---------------- Welcome + profanity + anti-flood ----------------
LAST_MSG = {}  # {(chat_id,user_id): [timestamps]}

async def welcome_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.new_chat_members:
        for u in update.message.new_chat_members:
            await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {u.full_name}!")

async def profanity_and_flood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    text = msg.text.lower()
    chat_id = str(msg.chat.id)
    antimat_on = settings_db.get("antimat", {}).get(chat_id, False)
    if antimat_on:
        for bad in ANTIMAT_WORDS:
            if bad in text:
                try:
                    await msg.delete()
                    await msg.reply_text("üö´ –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                except Exception:
                    pass
                return
    # anti-flood
    key = (msg.chat.id, msg.from_user.id)
    now_ts = datetime.utcnow().timestamp()
    arr = LAST_MSG.get(key, [])
    arr = [t for t in arr if now_ts - t < 10]
    arr.append(now_ts)
    LAST_MSG[key] = arr
    if len(arr) > 6:
        try:
            await msg.chat.restrict_member(msg.from_user.id, ChatPermissions(can_send_messages=False),
                                           until_date=datetime.utcnow() + timedelta(minutes=1))
            await msg.reply_text("ü§ê –ê–Ω—Ç–∏—Ñ–ª—É–¥: –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É.")
        except Exception:
            pass

# ---------------- Antimat toggle command ----------------
async def antimat_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # only allow chat admin or ADMIN_ID
    user = update.effective_user
    chat = update.effective_chat
    try:
        member = await chat.get_member(user.id)
        if member.status not in ("administrator", "creator") and str(user.id) != str(ADMIN_ID):
     