import os
import telebot
import requests
from flask import Flask, request
from threading import Thread

TOKEN = os.getenv("TOKEN")
SAVETUBE_KEY = os.getenv("SAVETUBE_KEY")
bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)

# ===================== Flask ping =====================
@app.route('/')
def home():
    return "MultiBotX is running!"

# ===================== –ú–æ–¥–µ—Ä–∞—Ü–∏—è =====================
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç MultiBotX. –ù–∞–ø–∏—à–∏ /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")

@bot.message_handler(commands=['warn'])
def warn_user(message):
    if not message.reply_to_message:
        return bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    bot.reply_to(message.reply_to_message, "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!")

@bot.message_handler(commands=['mute'])
def mute_user(message):
    if not message.reply_to_message:
        return bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞.")
    try:
        bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                 permissions=telebot.types.ChatPermissions(can_send_messages=False))
        bot.reply_to(message.reply_to_message, "üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–º—å—é—á–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    if not message.reply_to_message:
        return bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º—É—Ç–∞.")
    try:
        bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                 permissions=telebot.types.ChatPermissions(can_send_messages=True))
        bot.reply_to(message.reply_to_message, "üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—å—é—á–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['ban'])
def ban_user(message):
    if not message.reply_to_message:
        return bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.")
    try:
        bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        bot.reply_to(message.reply_to_message, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['unban'])
def unban_user(message):
    if not message.reply_to_message:
        return bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è.")
    try:
        bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        bot.reply_to(message.reply_to_message, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

# ===================== –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è =====================
import random

jokes = [
    "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Ö—É–¥–µ—Ç—å? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –µ—Å—Ç –±–∞–π—Ç—ã!",
    "–ß—Ç–æ —Å–∫–∞–∂–µ—Ç Python, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É? '–í—ã—Ö–æ–¥'.",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä... –∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∏–∫–æ–≥–¥–∞.",
]

@bot.message_handler(commands=['joke'])
def tell_joke(message):
    bot.send_message(message.chat.id, random.choice(jokes))

# ===================== –ê–≤—Ç–æ TikTok / YouTube =====================
def download_video_from_url(url):
    api_url = "https://save-tube-video-download.p.rapidapi.com/download"
    headers = {
        "X-RapidAPI-Key": SAVETUBE_KEY,
        "X-RapidAPI-Host": "save-tube-video-download.p.rapidapi.com"
    }
    params = {"url": url}
    try:
        response = requests.get(api_url, headers=headers, params=params, timeout=10)
        data = response.json()
        if 'links' in data and data['links']:
            return data['links'][0]['url']
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:", e)
    return None

@bot.message_handler(func=lambda message: 'tiktok.com' in message.text or 'youtu' in message.text)
def handle_video_links(message):
    url = message.text.strip()
    bot.send_chat_action(message.chat.id, 'upload_video')
    bot.send_message(message.chat.id, "‚è¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    video_url = download_video_from_url(url)
    if video_url:
        bot.send_video(message.chat.id, video_url)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")

# ===================== –ó–∞–ø—É—Å–∫ =====================
def start_bot():
    bot.remove_webhook()
    bot.infinity_polling()

if __name__ == '__main__':
    Thread(target=start_bot).start()
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))