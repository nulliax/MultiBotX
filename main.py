import os
import random
import logging
from flask import Flask, request
from telegram import Update, ChatPermissions, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import requests
from datetime import datetime, timedelta
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("BOT_TOKEN")
BOT_USERNAME = os.environ.get("BOT_USERNAME", "MultiBotX_bot")

# Flask
app = Flask(__name__)

# –î–æ–Ω–∫–µ —Ä–µ–π—Ç–∏–Ω–≥
donke_ratings = defaultdict(int)
last_camdonke_time = {}

# –ë–∞–∑–∞ —à—É—Ç–æ–∫
jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç –∑–∏–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Å–Ω–µ–∂–Ω—ã–µ —Ç–æ—á–∫–∏.",
    "–ö–∞–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ–ª–∏—Ç–∏–∫–æ–º –∏ –∫–æ—Ç–æ–º? –ö–æ—Ç —Ö–æ—Ç—è –±—ã –Ω–µ –≤—Ä—ë—Ç –≤ –≥–ª–∞–∑–∞.",
    "–Ø —Å–ø—Ä–æ—Å–∏–ª —É Siri: ¬´–ì–¥–µ –º–æ—è –¥–µ–≤—É—à–∫–∞?¬ª –û–Ω–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞: ¬´–í –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏¬ª.",
    "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî —ç—Ç–æ –≤–æ–ª—à–µ–±–Ω–∏–∫, —Ç–æ–ª—å–∫–æ –±–µ–∑ –º–∞–Ω—Ç–∏–∏ –∏ —Å –∫–æ—Ñ–µ.",
    "–ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏. –ù–µ –ø–æ–º–æ–≥–∞–µ—Ç? –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –µ—â—ë —Ä–∞–∑.",
    "Google –∑–Ω–∞–µ—Ç –æ —Ç–µ–±–µ –±–æ–ª—å—à–µ, —á–µ–º —Ç–≤–æ—è –º–∞–º–∞.",
    "–ì–ª–∞–≤–Ω–æ–µ –≤ –∂–∏–∑–Ω–∏ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è. –û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
    "Python ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –≤—Å—ë –ø—Ä–æ—Å—Ç–æ. –î–æ –º–æ–º–µ–Ω—Ç–∞, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–æ–∂–Ω–æ.",
    "–ù–µ –±–µ–π—Å—è –≥–æ–ª–æ–≤–æ–π –æ–± –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É... —Ö–æ—Ç—è... –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è –ø–∞—Ä–æ–ª—å.",
    "–†–∞–±–æ—Ç–∞–µ—à—å? –ú–æ–ª–æ–¥–µ—Ü. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—à—å? –ú–æ–ª–æ–¥–µ—Ü, –æ—Ç–¥—ã—Ö–∞—Ç—å —Ç–æ–∂–µ –Ω–∞–¥–æ."
]

quotes = [
    "¬´–ë—É–¥—å —Å–æ–±–æ–π. –ü—Ä–æ—á–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.¬ª ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
    "¬´–ú—É–¥—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ —Ç—Ä–µ–±—É–µ—Ç –≤—Å–µ–≥–æ –æ—Ç —Å–µ–±—è, –Ω–∏—á—Ç–æ–∂–Ω—ã–π ‚Äî –æ—Ç –¥—Ä—É–≥–∏—Ö.¬ª ‚Äî –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
    "¬´–ü–∞–¥–∞—è, –ø–æ–¥–Ω–∏–º–∞–π—Å—è. –ü—Ä–æ–∏–≥—Ä—ã–≤–∞—è, —É—á–∏—Å—å.¬ª ‚Äî –ö–æ–Ω—Ñ—É—Ü–∏–π",
    "¬´–õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –∏ –ø–æ–∂–∞–ª–µ—Ç—å, —á–µ–º –Ω–µ —Å–¥–µ–ª–∞—Ç—å –∏ –ø–æ–∂–∞–ª–µ—Ç—å.¬ª ‚Äî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ",
    "¬´–ì–ª—É–ø —Ç–æ—Ç, –∫—Ç–æ –Ω–µ —É—á–∏—Ç—Å—è –Ω–∞ —Å–≤–æ–∏—Ö –æ—à–∏–±–∫–∞—Ö. –£–º—ë–Ω —Ç–æ—Ç, –∫—Ç–æ —É—á–∏—Ç—Å—è –Ω–∞ —á—É–∂–∏—Ö.¬ª",
    "¬´–ï—Å–ª–∏ –¥–æ–ª–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±–µ–∑–¥–Ω—É, –±–µ–∑–¥–Ω–∞ –Ω–∞—á–Ω—ë—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–µ–±—è.¬ª ‚Äî –ù–∏—Ü—à–µ",
]

facts = [
    "–ú—É—Ä–∞–≤—å–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç.",
    "–£ —É–ª–∏—Ç–æ–∫ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–°–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è –º—ã—à—Ü–∞ –≤ —Ç–µ–ª–µ ‚Äî —è–∑—ã–∫.",
    "–®–æ–∫–æ–ª–∞–¥ –º–æ–∂–µ—Ç —É–±–∏—Ç—å —Å–æ–±–∞–∫—É.",
    "–ì–ª–∞–∑–∞ —Å—Ç—Ä–∞—É—Å–∞ –±–æ–ª—å—à–µ –µ–≥–æ –º–æ–∑–≥–∞.",
    "–ö—Ä—ã—Å—ã —Å–º–µ—é—Ç—Å—è, –∫–æ–≥–¥–∞ –∏—Ö —â–µ–∫–æ—Ç–∞—Ç—å.",
    "–ú—ë–¥ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è. –ï–≥–æ –º–æ–∂–Ω–æ –µ—Å—Ç—å —Å–ø—É—Å—Ç—è —Ç—ã—Å—è—á–∏ –ª–µ—Ç.",
    "–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–∏–Ω—è—è –∫—Ä–æ–≤—å.",
]

donke_phrases = [
    "Donke —Ä–∞–∑–æ–∑–ª–∏–ª—Å—è –∏ –ø–æ—à—ë–ª –∏—Å–∫–∞—Ç—å —Ç–µ–±—è.",
    "Donke —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–µ—Ç, –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å.",
    "Donke –∑–∞—Å–º–µ—è–ª—Å—è, –Ω–æ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–º–µ—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
    "Donke —Å—ä–µ–ª Wi-Fi –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ.",
    "Donke... –ø—Ä–æ—Å—Ç–æ Donke.",
    "Donke —É–∂–µ —Ä—è–¥–æ–º.",
    "Donke –∏–¥—ë—Ç –∑–∞ —Ç–æ–±–æ–π, –æ–Ω —É–∂–µ –≤ –ø—É—Ç–∏.",
]

banned_words = ["–¥—É—Ä–∞–∫", "—Ç—É–ø–æ–π", "–∏–¥–∏–æ—Ç", "–ª–æ—Ö", "–ø–µ—Ç—É—Ö"]  # –∏ —Ç.–¥.

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.new_chat_members:
        for user in update.message.new_chat_members:
            await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!")

# –ê–Ω—Ç–∏–º–∞—Ç
async def filter_bad_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if any(word in text for word in banned_words):
        await update.message.reply_text("üö´ –ù–µ —Ä—É–≥–∞–π—Å—è! –ú–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω.")

# –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(jokes))

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(quotes))

async def fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(facts))

async def cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://cataas.com/cat"
    await update.message.reply_photo(photo=url)

async def dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://random.dog/woof.json"
    data = requests.get(url).json()
    await update.message.reply_photo(photo=data["url"])

async def meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://meme-api.com/gimme"
    data = requests.get(url).json()
    await update.message.reply_photo(photo=data["url"])

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_dice()

# Donke
async def donke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(donke_phrases))

async def camdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    now = datetime.utcnow()
    last_time = last_camdonke_time.get(user_id)

    if last_time and now - last_time < timedelta(days=1):
        await update.message.reply_text("ü•µ –í—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∫–æ–Ω—á–∏–ª–∏ –≤ –î–æ–Ω–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    amount = random.randint(1, 100)
    donke_ratings[user_id] += amount
    last_camdonke_time[user_id] = now
    await update.message.reply_text(f"üí¶ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏–ª–∏ –≤ Donke {amount} –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã. Donke –≤–∞–º–∏ –¥–æ–≤–æ–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.")

async def topdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not donke_ratings:
        await update.message.reply_text("Donke –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–ª–µ–π —Å–ø–µ—Ä–º—ã –ø–µ—Ä–≤—ã–º!")
        return
    top = sorted(donke_ratings.items(), key=lambda x: x[1], reverse=True)[:50]
    text = "üèÜ –¢–û–ü –î–æ–Ω–∫–µ—Ä–æ–≤:\n\n"
    for i, (uid, amount) in enumerate(top, 1):
        user = await context.bot.get_chat(uid)
        text += f"{i}. {user.first_name}: {amount} –ª\n"
    await update.message.reply_text(text)

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è
async def moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    reply = update.message.reply_to_message
    if not reply:
        return

    chat_id = update.message.chat.id
    user_id = reply.from_user.id

    if "–º—É—Ç" in text:
        await context.bot.restrict_chat_member(chat_id, user_id, ChatPermissions(can_send_messages=False))
        await update.message.reply_text("üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω.")
    elif "—Ä–∞–∑–º—É—Ç" in text or "–∞–Ω–º—É—Ç" in text:
        await context.bot.restrict_chat_member(chat_id, user_id, ChatPermissions(can_send_messages=True))
        await update.message.reply_text("üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")
    elif "–±–∞–Ω" in text:
        await context.bot.ban_chat_member(chat_id, user_id)
        await update.message.reply_text("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
    elif "—Ä–∞–∑–±–∞–Ω" in text or "—É–Ω–±–∞–Ω" in text:
        await context.bot.unban_chat_member(chat_id, user_id)
        await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    elif "–≤–∞—Ä–Ω" in text:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
async def tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        url = context.args[0]
        if "tiktok.com" not in url:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ TikTok.")
            return
        await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        api_url = f"https://tikwm.com/api/?url={url}"
        res = requests.get(api_url).json()
        video_url = res.get("data", {}).get("play")
        if video_url:
            await update.message.reply_video(video=video_url)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ.")

async def youtube(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        url = context.args[0]
        if "youtube.com" not in url and "youtu.be" not in url:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube.")
            return
        await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
        api_url = f"https://ytmate.guru/api/ytvideo?url={url}"
        res = requests.get(api_url).json()
        link = res.get("download_url")
        if link:
            await update.message.reply_text(f"üì• –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n{link}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ.")

# /start –∏ /help
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç MultiBotX.\n\nüõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/joke, /quote, /fact, /cat, /dog, /meme, /dice\n/donke, /camdonke, /topdonke\n/tiktok <—Å—Å—ã–ª–∫–∞>\n/youtube <—Å—Å—ã–ª–∫–∞>\n\nüîß –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: –º—É—Ç, —Ä–∞–∑–º—É—Ç, –±–∞–Ω, —Ä–∞–∑–±–∞–Ω, –≤–∞—Ä–Ω.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üÜò –ö–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏:\n/start ‚Äî –ó–∞–ø—É—Å–∫\n/joke ‚Äî –®—É—Ç–∫–∞\n/cat ‚Äî –ö–æ—Ç–∏–∫\n/donke ‚Äî Donke\n/tiktok <—Å—Å—ã–ª–∫–∞> ‚Äî –°–∫–∞—á–∞—Ç—å TikTok\n/youtube <—Å—Å—ã–ª–∫–∞> ‚Äî –°–∫–∞—á–∞—Ç—å YouTube")

# Flask webhook
@app.route("/")
def home():
    return "MultiBotX is running!"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
application = ApplicationBuilder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(CommandHandler("joke", joke))
application.add_handler(CommandHandler("quote", quote))
application.add_handler(CommandHandler("fact", fact))
application.add_handler(CommandHandler("cat", cat))
application.add_handler(CommandHandler("dog", dog))
application.add_handler(CommandHandler("meme", meme))
application.add_handler(CommandHandler("dice", dice))
application.add_handler(CommandHandler("donke", donke))
application.add_handler(CommandHandler("camdonke", camdonke))
application.add_handler(CommandHandler("topdonke", topdonke))
application.add_handler(CommandHandler("tiktok", tiktok))
application.add_handler(CommandHandler("youtube", youtube))

application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, filter_bad_words))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, moderation))

if __name__ == "__main__":
    import threading

    def run_flask():
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

    threading.Thread(target=run_flask).start()
    application.run_polling()