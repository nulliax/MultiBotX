#!/usr/bin/env python3
# main.py ‚Äî MultiBotX (upgraded, polling + Flask health)
# Requirements: python-telegram-bot>=21.0, Flask, requests, yt_dlp, python-dotenv

import os
import json
import logging
import random
import re
import traceback
from datetime import datetime, timedelta
from pathlib import Path
from threading import Thread
from typing import Optional

import requests
import yt_dlp
from flask import Flask
from dotenv import load_dotenv
from telegram import (
    Update,
    ChatPermissions,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# Local .env for dev only (do not commit .env with secrets)
load_dotenv()

# ---------------- Config ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME", "")
SAVETUBE_KEY = os.getenv("SAVETUBE_KEY", None)  # optional
PORT = int(os.getenv("PORT", 5000))
MAX_SEND_BYTES = int(os.getenv("MAX_SEND_BYTES", 50 * 1024 * 1024))  # 50 MB default
COMMANDS_SETUP = True  # set bot commands on startup

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set. Add it to Environment variables on Render.")

# ---------------- Logging ----------------
logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s", level=logging.INFO)
logger = logging.getLogger("MultiBotX")

# ---------------- Storage ----------------
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)
DONKE_FILE = DATA_DIR / "donke.json"
JOKES_FILE = DATA_DIR / "jokes.json"
USAGE_FILE = DATA_DIR / "usage.json"

def load_json(path: Path):
    if path.exists():
        try:
            return json.loads(path.read_text(encoding="utf-8"))
        except Exception:
            logger.exception("Failed to load JSON %s", path)
    return {}

def save_json(path: Path, data):
    try:
        path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        logger.exception("Failed to save JSON %s", path)

donke_db = load_json(DONKE_FILE)
joke_db = load_json(JOKES_FILE) or []
usage_db = load_json(USAGE_FILE) or {}

# initial joke list if empty
if not joke_db:
    joke_db.extend([
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? OCT 31 == DEC 25.",
        "–Ø –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª —à—É—Ç–∫—É –ø—Ä–æ UDP, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –µ—ë –ø–æ–ª—É—á–∏—à—å.",
        "Debugging: –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –±–∞–≥–æ–≤ –≤ —Ñ–∏—á–∏."
    ])
    save_json(JOKES_FILE, joke_db)

# ---------------- Content banks (expanded) ----------------
FACTS = [
    "–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–ö–æ—à–∫–∏ –º–æ–≥—É—Ç —Å–ø–∞—Ç—å –¥–æ 20 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.",
    "–ú—ë–¥ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è."
]

QUOTES = [
    "¬´–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.¬ª",
    "¬´–î–µ–π—Å—Ç–≤—É–π ‚Äî –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –º–µ—á—Ç–∞—é—Ç.¬ª",
    "¬´–û—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ.¬ª"
]

BAD_WORDS = ["–±–ª—è–¥", "—Ö—É–π", "–ø–∏–∑–¥", "—Å—É–∫–∞", "–º—Ä–∞–∑"]  # —Ä–∞—Å—à–∏—Ä—è–π –ø–æ –∂–µ–ª–∞–Ω–∏—é

# ---------------- yt_dlp helper ----------------
YTDL_COMMON = {
    "format": "bestvideo+bestaudio/best",
    "outtmpl": "tmp_video.%(ext)s",
    "noplaylist": True,
    "quiet": True,
    "no_warnings": True,
    "ignoreerrors": True,
    "cachedir": False,
}

def yt_download_file(url: str, audio_only: bool = False) -> Optional[str]:
    """
    Downloads media via yt_dlp.
    If audio_only True tries to extract audio (may need ffmpeg).
    Returns path to file or None.
    """
    opts = dict(YTDL_COMMON)
    if audio_only:
        # prefer best audio and try to convert to mp3 (requires ffmpeg)
        opts.update({
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
            "outtmpl": "tmp_audio.%(ext)s",
        })
    try:
        with yt_dlp.YoutubeDL(opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            # if audio_only and postprocessor converted -> extension may be mp3
            # try to find resulting file
            if audio_only:
                possible = [p for p in Path(".").glob("tmp_audio.*")]
                if possible:
                    return str(possible[0])
            return filename
    except Exception:
        logger.exception("yt_dlp download failed for %s (audio_only=%s)", url, audio_only)
        return None

# ---------------- Utilities ----------------
def today_iso() -> str:
    return datetime.utcnow().date().isoformat()

def safe_remove(path: str):
    try:
        os.remove(path)
    except Exception:
        pass

def inc_usage(command: str):
    usage_db[command] = usage_db.get(command, 0) + 1
    save_json(USAGE_FILE, usage_db)

# ---------------- Flask health ----------------
app = Flask(__name__)
@app.route("/", methods=["GET"])
def home():
    return "MultiBotX is running."

# ---------------- Telegram handlers ----------------

# Setup bot commands (so users see them when typing '/')
async def set_commands_on_startup(app):
    try:
        commands = [
            BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("joke", "–®—É—Ç–∫–∞"),
            BotCommand("donke", "–®—É—Ç–∫–∞ –ø—Ä–æ Donke"),
            BotCommand("camdonke", "–ó–∞–ª–∏—Ç—å –≤ Donke (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)"),
            BotCommand("topdonke", "–¢–æ–ø Donke"),
            BotCommand("meme", "–ú–µ–º"),
            BotCommand("cat", "–§–æ—Ç–æ –∫–æ—Ç–∞"),
            BotCommand("dog", "–§–æ—Ç–æ —Å–æ–±–∞–∫–∏"),
            BotCommand("dice", "–ö—É–±–∏–∫"),
            BotCommand("download", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –ø–æ —Å—Å—ã–ª–∫–µ"),
            BotCommand("searchimage", "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
            BotCommand("trivia", "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç/–≤–æ–ø—Ä–æ—Å"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("addjoke", "–î–æ–±–∞–≤–∏—Ç—å —à—É—Ç–∫—É"),
        ]
        await app.bot.set_my_commands(commands)
        logger.info("Commands set")
    except Exception:
        logger.exception("Failed to set commands")

# Start & menu
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("start")
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø MultiBotX. –ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏.")

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("menu")
    text = (
        "üìã *–ú–µ–Ω—é MultiBotX*\n\n"
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:\n"
        "/joke /fact /quote /cat /dog /meme /dice\n\n"
        "Donke:\n"
        "/donke /camdonke /topdonke\n\n"
        "–í–∏–¥–µ–æ:\n"
        "/download <url> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä: –í–∏–¥–µ–æ / –ê—É–¥–∏–æ\n\n"
        "–ü—Ä–æ—á–µ–µ:\n"
        "/searchimage <–∑–∞–ø—Ä–æ—Å> ‚Äî –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "/trivia ‚Äî —Ñ–∞–∫—Ç/–≤–æ–ø—Ä–æ—Å\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω—ã)\n"
    )
    await update.message.reply_text(text)

# Entertainment
async def joke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("joke")
    await update.message.reply_text(random.choice(joke_db))

async def addjoke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("addjoke")
    text = " ".join(context.args) if context.args else (update.message.text or "")
    # expected: /addjoke some joke here
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addjoke –¢–ï–ö–°–¢_–®–£–¢–ö–ò")
        return
    # remove command part if exists
    if text.lower().startswith("/addjoke"):
        text = text[len("/addjoke"):].strip()
    joke_db.append(text)
    save_json(JOKES_FILE, joke_db)
    await update.message.reply_text("–î–æ–±–∞–≤–∏–ª —à—É—Ç–∫—É ‚Äî —Å–ø–∞—Å–∏–±–æ!")

async def donke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("donke")
    await update.message.reply_text(random.choice(["Donke –ª–µ–≥–µ–Ω–¥–∞.", "Donke –≤ –¥–µ–ª–µ.", "Donke forever."]))

async def camdonke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("camdonke")
    user = update.effective_user
    uid = str(user.id)
    entry = donke_db.get(uid, {"name": user.full_name, "total": 0, "last": None})
    if entry.get("last") == today_iso():
        await update.message.reply_text("‚ùó –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∑–∞–ª–∏–≤–∞–ª–∏ ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    amount = random.randint(1, 100)
    entry["total"] = entry.get("total", 0) + amount
    entry["last"] = today_iso()
    entry["name"] = user.full_name
    donke_db[uid] = entry
    save_json(DONKE_FILE, donke_db)
    await update.message.reply_text(f"üí¶ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏–ª–∏ –≤ Donke {amount} –ª–∏—Ç—Ä–æ–≤! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")

async def topdonke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("topdonke")
    if not donke_db:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ª–∏–≤–∞–ª.")
        return
    sorted_list = sorted(donke_db.items(), key=lambda kv: kv[1].get("total", 0), reverse=True)[:50]
    lines = ["üèÜ –¢–æ–ø Donke:"]
    for i, (uid, e) in enumerate(sorted_list, 1):
        lines.append(f"{i}. {e.get('name','?')} ‚Äî {e.get('total',0)} –ª")
    await update.message.reply_text("\n".join(lines))

async def fact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("fact")
    await update.message.reply_text(random.choice(FACTS))

async def quote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("quote")
    await update.message.reply_text(random.choice(QUOTES))

async def cat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("cat")
    try:
        r = requests.get("https://api.thecatapi.com/v1/images/search", timeout=10).json()
        await update.message.reply_photo(r[0]["url"])
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞.")

async def dog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("dog")
    try:
        r = requests.get("https://dog.ceo/api/breeds/image/random", timeout=10).json()
        await update.message.reply_photo(r["message"])
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏.")

async def meme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("meme")
    try:
        r = requests.get("https://meme-api.com/gimme", timeout=10).json()
        await update.message.reply_photo(r["url"], caption=r.get("title", "–ú–µ–º"))
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º.")

async def dice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("dice")
    await update.message.reply_dice()

# trivia
TRIVIA = [
    "–°–∫–æ–ª—å–∫–æ —Å–µ—Ä–¥–µ—Ü —É –æ—Å—å–º–∏–Ω–æ–≥–∞? ‚Äî –¢—Ä–∏.",
    "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –∑–º–µ–∏? ‚Äî Python.",
]
async def trivia_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("trivia")
    await update.message.reply_text(random.choice(TRIVIA))

# search image (simple unsplash source)
async def searchimage_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("searchimage")
    query = " ".join(context.args) if context.args else None
    if not query:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /searchimage <–∑–∞–ø—Ä–æ—Å>")
        return
    try:
        # unsplash source allows simple random images without API key
        url = f"https://source.unsplash.com/800x600/?{requests.utils.requote_uri(query)}"
        await update.message.reply_photo(url)
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# stats (admin)
async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # only chat owner / specific id allowed ‚Äî for simplicity, allow user id match ENV ADMIN_ID or chat creator
    ADMIN_ID = os.getenv("ADMIN_ID")
    if ADMIN_ID and str(user.id) != str(ADMIN_ID):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    inc_usage("stats")
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"]
    for k, v in sorted(usage_db.items(), key=lambda x: x[1], reverse=True):
        lines.append(f"{k}: {v}")
    await update.message.reply_text("\n".join(lines) if len(lines) > 1 else "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# moderation (reply-based commands without /)
async def moderation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.reply_to_message:
        return
    cmd = (msg.text or "").strip().lower()
    target = msg.reply_to_message.from_user
    chat = msg.chat
    try:
        member = await chat.get_member(msg.from_user.id)
        if not (member.status in ("administrator", "creator") or member.can_restrict_members):
            await msg.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return
    except Exception:
        logger.exception("Can't check member status")

    if "–≤–∞—Ä–Ω" in cmd:
        ctx_warns = context.bot_data.setdefault("warns", {})
        ctx_warns[target.id] = ctx_warns.get(target.id, 0) + 1
        await msg.reply_text(f"‚ö†Ô∏è {target.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({ctx_warns[target.id]}).")
        if ctx_warns[target.id] >= 3:
            await chat.ban_member(target.id)
            await msg.reply_text(f"üö´ {target.full_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
            ctx_warns[target.id] = 0
    elif "–º—É—Ç" in cmd:
        until = datetime.utcnow() + timedelta(minutes=10)
        try:
            await chat.restrict_member(target.id, ChatPermissions(can_send_messages=False), until_date=until)
            await msg.reply_text(f"üîá {target.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç.")
        except Exception:
            logger.exception("Mute failed")
    elif cmd in ("—Ä–∞–∑–º—É—Ç", "–∞–Ω–º—É—Ç"):
        try:
            await chat.restrict_member(target.id, ChatPermissions(can_send_messages=True))
            await msg.reply_text(f"üîä {target.full_name} —Ä–∞–∑–º—É—á–µ–Ω.")
        except Exception:
            logger.exception("Unmute failed")
    elif "–±–∞–Ω" in cmd:
        try:
            await chat.ban_member(target.id)
            await msg.reply_text(f"üö´ {target.full_name} –∑–∞–±–∞–Ω–µ–Ω.")
        except Exception:
            logger.exception("Ban failed")
    elif cmd in ("—Ä–∞–∑–±–∞–Ω", "—É–Ω–±–∞–Ω", "–∞–Ω–±–∞–Ω"):
        try:
            await chat.unban_member(target.id)
            await msg.reply_text(f"‚úÖ {target.full_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except Exception:
            logger.exception("Unban failed")

# welcome/profanity/anti-flood
LAST_MSG = {}
async def welcome_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.new_chat_members:
        for m in update.message.new_chat_members:
            await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {m.full_name}!")

async def profanity_and_flood_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    text = msg.text.lower()
    for bad in BAD_WORDS:
        if bad in text:
            try:
                await msg.delete()
                await msg.reply_text(f"{msg.from_user.first_name}, –Ω–µ —Ä—É–≥–∞–π—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            except Exception:
                pass
            return
    # flood simple
    key = (msg.chat.id, msg.from_user.id)
    now = datetime.utcnow().timestamp()
    arr = LAST_MSG.get(key, [])
    arr = [t for t in arr if now - t < 10]
    arr.append(now)
    LAST_MSG[key] = arr
    if len(arr) > 6:
        try:
            await msg.chat.restrict_member(msg.from_user.id, ChatPermissions(can_send_messages=False),
                                           until_date=datetime.utcnow() + timedelta(minutes=1))
            await msg.reply_text("ü§ê –ê–Ω—Ç–∏—Ñ–ª—É–¥: –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É.")
        except Exception:
            pass

# Download flow:
# - User can run /download <url> OR just send a message with URL
# - Bot replies with inline buttons: "–í–∏–¥–µ–æ", "–ê—É–¥–∏–æ"
# - On callback query, bot downloads (yt_dlp) and sends file (or link if too big)
async def make_download_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("download_prompt")
    # extract first URL
    text = None
    if context.args:
        text = context.args[0]
    elif update.message and update.message.text:
        m = re.search(r"https?://\S+", update.message.text)
        if m:
            text = m.group(0)
    if not text:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube/TikTok –∏ —Ç.–¥.) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /download <url>")
        return
    url = text.strip()
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üìπ –í–∏–¥–µ–æ", callback_data=f"dl|video|{url}"),
        InlineKeyboardButton("üéß –ê—É–¥–∏–æ", callback_data=f"dl|audio|{url}")
    ]])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # acknowledge
    data = query.data or ""
    if not data.startswith("dl|"):
        return
    try:
        _, kind, url = data.split("|", 2)
    except ValueError:
        await query.edit_message_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # inform user
    msg = await query.edit_message_text("‚è¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
    # attempt SaveTube for TikTok audio/video if key present and kind=video
    file_path = None
    try:
        if "tiktok.com" in url and SAVETUBE_KEY and kind == "video":
            try:
                headers = {"X-RapidAPI-Key": SAVETUBE_KEY}
                api = "https://save-tube-video-download.p.rapidapi.com/download"
                r = requests.get(api, headers=headers, params={"url": url}, timeout=15)
                j = r.json()
                if isinstance(j, dict) and j.get("links"):
                    vid_url = j["links"][0].get("url")
                    if vid_url:
                        # send direct url if smaller than limit (we don't know size) ‚Äî try to send as video
                        await context.bot.send_video(chat_id=query.message.chat_id, video=vid_url)
                        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                        return
            except Exception:
                logger.exception("SaveTube attempt failed, falling back to yt_dlp")

        # Use yt_dlp
        audio_only = (kind == "audio")
        file_path = yt_download_file(url, audio_only=audio_only)
        if not file_path:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ.")
            return

        size = os.path.getsize(file_path)
        if size > MAX_SEND_BYTES:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ.")
            safe_remove(file_path)
            return

        # send file
        with open(file_path, "rb") as fp:
            if audio_only:
                # try to send as audio or document fallback
                try:
                    await context.bot.send_audio(chat_id=query.message.chat_id, audio=fp)
                except Exception:
                    fp.seek(0)
                    await context.bot.send_document(chat_id=query.message.chat_id, document=fp)
            else:
                fp.seek(0)
                await context.bot.send_video(chat_id=query.message.chat_id, video=fp)
        safe_remove(file_path)
    except Exception:
        logger.exception("Error in callback download")
        try:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")
        except Exception:
            pass

# Generic message handler: if contains URL -> show buttons
async def url_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    m = re.search(r"https?://\S+", text)
    if m:
        await make_download_buttons(update, context)
    els