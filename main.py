import os import logging from flask import Flask, request from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, CallbackQueryHandler) from telegram.constants import ChatAction from datetime import datetime, timedelta import random import aiohttp import re

–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

app = Flask(name)

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

BOT_TOKEN = os.getenv("BOT_TOKEN") HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME") PORT = int(os.environ.get('PORT', 10000))

–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram

application = ApplicationBuilder().token(BOT_TOKEN).build()

--- –î–∞–Ω–Ω—ã–µ (—à—É—Ç–∫–∏, —Ü–∏—Ç–∞—Ç—ã –∏ —Ç.–¥.) ---

JOKES = [ "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ø–ª–∞—á—É—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç try.", "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–æ–ª—å –≤–æ—Å—å–º—ë—Ä–∫–µ? –ö–ª–∞—Å—Å–Ω—ã–π –ø–æ—è—Å!", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ 10 —Ç–∏–ø–æ–≤: —Ç–µ—Ö, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥, –∏ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ—Ç.", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –∫–æ–≥–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–∏–Ω–æ–≤–∞—Ç —Ç—ã.", "–°–Ω–∞—á–∞–ª–∞ –±—ã–ª–æ —Å–ª–æ–≤–æ. –ò —Å–ª–æ–≤–æ –±—ã–ª–æ 'undefined'." ]

QUOTES = [ "–ñ–∏–∑–Ω—å ‚Äî –∫–∞–∫ git, –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å reset --hard.", "–û—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É.", "–°–∏–ª–∞ –∫–æ–¥–∞ ‚Äî –≤ –µ–≥–æ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, –∞ –Ω–µ –≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.", "–î–µ–ª–∞–π –∫–∞–∫ –Ω–∞–¥–æ ‚Äî –∏ –±—É–¥–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ." ]

FACTS = [ "–ü–∏—Ç–æ–Ω –Ω–∞–∑–≤–∞–Ω –Ω–µ –≤ —á–µ—Å—Ç—å –∑–º–µ–∏, –∞ –≤ —á–µ—Å—Ç—å —à–æ—É 'Monty Python'.", "–ü–µ—Ä–≤—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî –ê–¥–∞ –õ–∞–≤–ª–µ–π—Å, –µ—â—ë –≤ XIX –≤–µ–∫–µ.", "–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —è–∑—ã–∫ 2024 –≥–æ–¥–∞ ‚Äî Python.", "–°–ª–æ–≤–æ 'bug' –ø–æ—è–≤–∏–ª–æ—Å—å –∏–∑-–∑–∞ –Ω–∞—Å—Ç–æ—è—â–µ–π –º–æ–ª–∏ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ." ]

from flask import Flask, request from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler from telegram.constants import ChatMemberStatus import os, re, random, logging, datetime, asyncio, yt_dlp, requests, json from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN") PORT = int(os.environ.get("PORT", 5000)) HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME") APP_URL = f"https://{HOSTNAME}" if HOSTNAME else None

app = Flask(name) logging.basicConfig(level=logging.INFO)

application = ApplicationBuilder().token(TOKEN).build()

--- –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ---

JOKES = [ "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ø–ª–∞—á—É—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç try.", "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–æ–ª—å –≤–æ—Å—å–º—ë—Ä–∫–µ? –ö–ª–∞—Å—Å–Ω—ã–π –ø–æ—è—Å!", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ 10 —Ç–∏–ø–æ–≤: —Ç–µ—Ö, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥, –∏ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ—Ç.", "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ. –≠—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞.", "–û—à–∏–±–∫–∞ 404: —à—É—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" ]

FACTS = [ "–§–∞–∫—Ç: –£ –∂–∏—Ä–∞—Ñ–∞ —Ç–∞–∫–æ–π –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–ø–ø–∞—Ä–∞—Ç, –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞, –Ω–æ –æ–Ω –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–∑–¥–∞—ë—Ç –∑–≤—É–∫–æ–≤.", "–§–∞–∫—Ç: –°–∞–º–æ–µ –¥–æ–ª–≥–æ–µ –Ω–∞—É—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª–∏–ª–æ—Å—å –±–æ–ª–µ–µ 75 –ª–µ—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Å–∏—Ö –ø–æ—Ä.", "–§–∞–∫—Ç: –ö–æ—à–∫–∏ —Å–ø—è—Ç –æ–∫–æ–ª–æ 70% —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏.", "–§–∞–∫—Ç: –í –∫–æ—Å–º–æ—Å–µ –Ω–µ—Ç –∑–≤—É–∫–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –Ω–µ—Ç –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—É–∫–æ–≤—ã—Ö –≤–æ–ª–Ω.", "–§–∞–∫—Ç: –í–æ–¥–∞ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ç—Ä—ë—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö: –∂–∏–¥–∫–æ–º, —Ç–≤—ë—Ä–¥–æ–º –∏ –≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–º ‚Äî –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –¥–∞–≤–ª–µ–Ω–∏–∏." ]

QUOTES = [ "–ë—É–¥—å —Å–æ–±–æ–π; –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã. ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥", "–õ–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤–∞—Å –æ—Ç –ø—É–Ω–∫—Ç–∞ –ê –∫ –ø—É–Ω–∫—Ç—É –ë. –í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫—É–¥–∞ —É–≥–æ–¥–Ω–æ. ‚Äî –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω", "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. ‚Äî –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å", "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º–µ—Ç—å —Ç–æ, —á—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–º–µ–ª, –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–ª. ‚Äî –ö–æ–∫–æ –®–∞–Ω–µ–ª—å", "–ü–∞–¥–∞—è —Å–µ–º—å —Ä–∞–∑, –ø–æ–¥–Ω–∏–º–∞–π—Å—è –≤–æ—Å–µ–º—å. ‚Äî –Ø–ø–æ–Ω—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞" ]

DONKE_QUOTES = [ "Donke ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ, —Å–ø–æ—Å–æ–±–Ω–æ–µ –±–µ—Å–∏—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ Wi-Fi.", "Donke –Ω–µ –±–∞–≥ ‚Äî Donke —Ñ–∏—á–∞.", "Donke –≤–æ—à—ë–ª –≤ —á–∞—Ç –∏ IQ –≤—ã—à–µ–ª.", "Donke –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ—Å–∏—Ç—å –∏ –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å, –∑–∞ —á—Ç–æ –µ–≥–æ –∑–∞–±–∞–Ω–∏–ª–∏.", "Donke ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å –±–µ–∑ —É—Å–∏–ª–∏–π." ]

--- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---

@app.route('/') def home(): return 'MultiBotX —Ä–∞–±–æ—Ç–∞–µ—Ç!'

--- Webhook ---

@app.route(f'/{TOKEN}', methods=['POST']) def webhook(): if request.method == "POST": update = Update.de_json(request.get_json(force=True), application.bot) asyncio.run(application.process_update(update)) return 'ok'

@app.before_first_request def set_webhook(): if APP_URL: application.bot.delete_webhook() application.bot.set_webhook(url=f"{APP_URL}/{TOKEN}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø ‚Äî –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç MultiBotX.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é.",
    )


@dp.message(Command("help"))
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫\n"
        "/help ‚Äî –ü–æ–º–æ—â—å\n"
        "/warn, /mute, /ban ‚Äî –ú–æ–¥–µ—Ä–∞—Ü–∏—è\n"
        "/unmute, /unban ‚Äî –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
        "/remindme ‚Äî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "üé≤ /joke, /fact, /quote, /donke\n"
        "üê± /cat, üê∂ /dog, üòÇ /meme, üé≤ /dice\n"
        "üì© –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube/TikTok –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É"
    )


@dp.message(Command("joke"))
async def joke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(JOKES))


@dp.message(Command("fact"))
async def fact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(FACTS))


@dp.message(Command("quote"))
async def quote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(QUOTES))


@dp.message(Command("donke"))
async def donke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(DONKE_QUOTES))


@dp.message(Command("dice"))
async def dice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_dice()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å API
async def send_photo(update: Update, url: str, json_key: str = None):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            data = response.json()
            if json_key:
                photo_url = data[json_key]
            else:
                photo_url = data["url"]
            await update.message.reply_photo(photo_url)
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")


@dp.message(Command("cat"))
async def cat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_photo(update, "https://api.thecatapi.com/v1/images/search", json_key=None)


@dp.message(Command("dog"))
async def dog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_photo(update, "https://dog.ceo/api/breeds/image/random", json_key="message")


@dp.message(Command("meme"))
async def meme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_photo(update, "https://meme-api.com/gimme", json_key="url")# –ú–û–î–ï–†–ê–¶–ò–Ø
async def extract_user_id(message: Message):
    if message.reply_to_message:
        return message.reply_to_message.from_user.id
    return None


async def is_admin(chat_id, user_id):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ("administrator", "creator")
    except:
        return False


@dp.message(Command("warn"))
async def warn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
    user_id = update.message.reply_to_message.from_user.id
    warns = user_warnings.get(user_id, 0) + 1
    user_warnings[user_id] = warns
    if warns >= 3:
        await update.message.reply_text("3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–º—É—á–µ–Ω.")
        await context.bot.restrict_chat_member(
            chat_id=update.effective_chat.id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=timedelta(minutes=10)
        )
        user_warnings[user_id] = 0
    else:
        await update.message.reply_text(f"–í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –°–µ–π—á–∞—Å: {warns}/3")


@dp.message(Command("mute"))
async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–º—É—Ç–∏—Ç—å.")
    user_id = update.message.reply_to_message.from_user.id
    await context.bot.restrict_chat_member(
        chat_id=update.effective_chat.id,
        user_id=user_id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=timedelta(minutes=30),
    )
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç.")


@dp.message(Command("unmute"))
async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º—É—Ç.")
    user_id = update.message.reply_to_message.from_user.id
    await context.bot.restrict_chat_member(
        chat_id=update.effective_chat.id,
        user_id=user_id,
        permissions=ChatPermissions(can_send_messages=True),
    )
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")


@dp.message(Command("ban"))
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.")
    user_id = update.message.reply_to_message.from_user.id
    await context.bot.ban_chat_member(update.effective_chat.id, user_id)
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")


@dp.message(Command("unban"))
async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.")
    user_id = update.message.reply_to_message.from_user.id
    await context.bot.unban_chat_member(update.effective_chat.id, user_id)
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")# –†–ê–ë–û–¢–ê –° –°–õ–û–í–ê–ú–ò –ú–û–î–ï–†–ê–¶–ò–ò (–º—É—Ç, –±–∞–Ω –∏ —Ç.–¥.)
@dp.message()
async def moderation_by_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    reply = update.message.reply_to_message
    if not reply:
        return

    user_id = reply.from_user.id

    if "–≤–∞—Ä–Ω" in text:
        warns = user_warnings.get(user_id, 0) + 1
        user_warnings[user_id] = warns
        if warns >= 3:
            await context.bot.restrict_chat_member(
                chat_id=update.effective_chat.id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=timedelta(minutes=10)
            )
            user_warnings[user_id] = 0
            return await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª 3/3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –∑–∞–º—É—á–µ–Ω.")
        else:
            return await update.message.reply_text(f"–í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –°–µ–π—á–∞—Å: {warns}/3")

    elif "–º—É—Ç" in text:
        await context.bot.restrict_chat_member(
            chat_id=update.effective_chat.id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=timedelta(minutes=30)
        )
        return await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç.")

    elif "—Ä–∞–∑–º—É—Ç" in text or "–∞–Ω–º—É—Ç" in text:
        await context.bot.restrict_chat_member(
            chat_id=update.effective_chat.id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=True),
        )
        return await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")

    elif "–±–∞–Ω" in text:
        await context.bot.ban_chat_member(update.effective_chat.id, user_id)
        return await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")

    elif "—Ä–∞–∑–±–∞–Ω" in text or "–∞–Ω–±–∞–Ω" in text or "—É–Ω–±–∞–Ω" in text:
        await context.bot.unban_chat_member(update.effective_chat.id, user_id)
        return await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")# –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï
@dp.message(Command("remindme"))
async def remind_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split(maxsplit=2)
    if len(args) < 3:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /remindme <–≤—Ä–µ–º—è> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
    try:
        time = int(args[1])
        text = args[2]
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {time} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(time)
        await update.message.reply_text(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /remindme 60 –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É.")# –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û –ò–ó YOUTUBE –ò TIKTOK
SAVE_TUBE_API_KEY = os.getenv("SAVE_TUBE_API_KEY")
SAVE_TUBE_URL = "https://api.savetube.me/info"

@dp.message(Command("yt"))
async def download_youtube(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split(maxsplit=1)
    if len(args) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /yt <—Å—Å—ã–ª–∫–∞>")
    url = args[1]
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")

    async with aiohttp.ClientSession() as session:
        async with session.post(SAVE_TUBE_URL, json={"url": url, "apikey": SAVE_TUBE_API_KEY}) as resp:
            data = await resp.json()
            if not data.get("medias"):
                return await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")
            best = data["medias"][0]
            video_url = best["url"]
            await update.message.reply_video(video=video_url, caption="üé¨ –ì–æ—Ç–æ–≤–æ!")

@dp.message(Command("tt"))
async def download_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split(maxsplit=1)
    if len(args) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /tt <—Å—Å—ã–ª–∫–∞>")
    url = args[1]
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")

    async with aiohttp.ClientSession() as session:
        async with session.post(SAVE_TUBE_URL, json={"url": url, "apikey": SAVE_TUBE_API_KEY}) as resp:
            data = await resp.json()
            if not data.get("medias"):
                return await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")
            best = data["medias"][0]
            video_url = best["url"]
            await update.message.reply_video(video=video_url, caption="üé¨ –ì–æ—Ç–æ–≤–æ!")# –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ù–û–í–´–•
@dp.chat_member()
async def greet_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member
    if member.new_chat_member.status == ChatMember.MEMBER:
        await context.bot.send_message(
            chat_id=update.chat_member.chat.id,
            text=f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.new_chat_member.user.mention_html()}!",
            parse_mode="HTML"
        )# –§–ò–õ–¨–¢–† –ú–ê–¢–ê –ò –ê–ù–¢–ò–§–õ–£–î
BAD_WORDS = ["–ø–ª–æ—Ö–æ–µ", "—Å–ª–æ–≤–æ", "–º–∞—Ç", "–∏–¥–∏–æ—Ç", "–¥—É—Ä–∞–∫"]  # —Å—é–¥–∞ –¥–æ–±–∞–≤—å –ª—é–±—ã–µ –º–∞—Ç—ã

user_message_times = {}

@dp.message()
async def auto_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.effective_chat.id
    now = datetime.now()

    # –ê–Ω—Ç–∏—Ñ–ª—É–¥
    last_time = user_message_times.get(user_id)
    if last_time and (now - last_time).total_seconds() < 1.5:
        await context.bot.delete_message(chat_id, update.message.message_id)
        return
    user_message_times[user_id] = now

    # –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞
    msg_text = update.message.text.lower()
    if any(bad_word in msg_text for bad_word in BAD_WORDS):
        await context.bot.delete_message(chat_id, update.message.message_id)
        await update.message.reply_text("‚ö†Ô∏è –ë–µ–∑ –º–∞—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")# AI-–ó–ê–ì–õ–£–®–ö–ê (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è API-–∫–ª—é—á)
@dp.message(Command("ai"))
async def ai_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ AI –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –§—É–Ω–∫—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.")# FLASK-–°–ï–†–í–ï–† –î–õ–Ø RENDER
@app.route('/')
def home():
    return "MultiBotX —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/webhook', methods=['POST'])
def webhook():
    return "Webhook!"# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
def register_handlers():
    pass  # —Ö–µ–Ω–¥–ª–µ—Ä—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤—ã—à–µ# –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò FLASK
if __name__ == '__main__':
    import asyncio

    async def run_bot():
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")

    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)