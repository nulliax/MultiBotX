# ================== MultiBotX - –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ==================
# –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è python-telegram-bot v21+ –∏ Flask
# –ê–≤—Ç–æ—Ä: ChatGPT + Archangel_MichaeI
# ============================================================================

import os
import re
import random
import logging
import json
import threading
from datetime import datetime, timedelta
from functools import wraps

from flask import Flask, request
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import yt_dlp
import requests

# ================= –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
MAX_SEND_BYTES = int(os.getenv("MAX_SEND_BYTES", str(1024 * 1024 * 1024)))  # –¥–æ 1 –ì–ë
COMMANDS_SETUP = os.getenv("COMMANDS_SETUP", "true").lower() in ("1", "true", "yes")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ================= –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ================= Flask =================
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "MultiBotX is running!"

# ================= –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ =================
antimat_enabled = False
warns = {}
donke_jokes = [
    "Donke –ø–æ—à—ë–ª –≤ –º–∞–≥–∞–∑–∏–Ω, –∞ –≤–µ—Ä–Ω—É–ª—Å—è –±–µ–∑ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.",
    "Donke —Å–º–µ—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–¥ —à—É—Ç–∫–∞–º–∏ Donke.",
    "Donke –ø—Ä–∏–¥—É–º–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω —Ñ–∏–∑–∏–∫–∏: –∑–∞–∫–æ–Ω –ª–µ–Ω–∏."
]
bad_words = ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "–æ—Å—ë–ª", "–∫–æ–∑—ë–ª", "–º—É–¥–∞–∫", "–ø–∏–¥–æ—Ä", "–ª–æ—Ö", "–º—Ä–∞–∑—å", "–≥–∞–Ω–¥–æ–Ω"]

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é Telegram
BOT_COMMANDS = [
    BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
    BotCommand("menu", "–ö—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"),
    BotCommand("joke", "–°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞"),
    BotCommand("fact", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"),
    BotCommand("quote", "–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"),
    BotCommand("cat", "–§–æ—Ç–æ –∫–æ—Ç–∞"),
    BotCommand("dog", "–§–æ—Ç–æ —Å–æ–±–∞–∫–∏"),
    BotCommand("meme", "–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º"),
    BotCommand("dice", "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"),
    BotCommand("donke", "–®—É—Ç–∫–∞ –ø—Ä–æ Donke"),
    BotCommand("camdonke", "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —à—É—Ç–∫—É Donke"),
    BotCommand("topdonke", "–¢–æ–ø —à—É—Ç–æ–∫ Donke"),
    BotCommand("antimat", "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-–º–∞—Ç"),
]# ================= –ß–∞—Å—Ç—å 2: –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –º–µ–º—ã, —Ñ–∞–∫—Ç—ã, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ =================

from pathlib import Path
import json
import asyncio

# –ü–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)

JOKES_FILE = DATA_DIR / "jokes.json"
DONKE_FILE = DATA_DIR / "donke.json"
USAGE_FILE = DATA_DIR / "usage.json"
SETTINGS_FILE = DATA_DIR / "settings.json"

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —É—Ç–∏–ª–∏—Ç—ã
def load_json_safe(path: Path, default=None):
    try:
        if path.exists():
            return json.loads(path.read_text(encoding="utf-8"))
    except Exception as e:
        logger.exception("load_json_safe error: %s", e)
    return default if default is not None else {}

def save_json_safe(path: Path, data):
    try:
        path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        logger.exception("save_json_safe error: %s", e)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑
jokes_store = load_json_safe(JOKES_FILE, {"jokes": [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? OCT 31 == DEC 25.",
    "–Ø –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª —à—É—Ç–∫—É –ø—Ä–æ UDP, –Ω–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ –¥–æ–π—Ç–∏.",
    "Debugging ‚Äî –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –±–∞–≥–æ–≤ –≤ —Ñ–∏—á–∏."
]})
donke_store = load_json_safe(DONKE_FILE, {})
usage_store = load_json_safe(USAGE_FILE, {})
settings_store = load_json_safe(SETTINGS_FILE, {"antimat": {}})

# –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def inc_usage(key: str):
    usage_store[key] = usage_store.get(key, 0) + 1
    save_json_safe(USAGE_FILE, usage_store)

# ----------------- –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã -----------------
async def cmd_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É"""
    inc_usage("joke")
    joke = random.choice(jokes_store.get("jokes", []))
    await update.message.reply_text(joke)

async def cmd_addjoke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —à—É—Ç–∫—É –≤ –±–∞–∑—É: /addjoke –¢–µ–∫—Å—Ç"""
    inc_usage("addjoke")
    text = " ".join(context.args) if context.args else ""
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addjoke –¢–ï–ö–°–¢_–®–£–¢–ö–ò")
        return
    jokes_store.setdefault("jokes", []).append(text)
    save_json_safe(JOKES_FILE, jokes_store)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –®—É—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def cmd_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("fact")
    facts = [
        "–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
        "–ü—á—ë–ª—ã –≤–∏–¥—è—Ç —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç.",
        "–ú—ë–¥ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è."
    ]
    await update.message.reply_text(random.choice(facts))

async def cmd_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("quote")
    quotes = [
        "¬´–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞—á–∞—Ç—å.¬ª",
        "¬´–û—à–∏–±–∫–∏ ‚Äî –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.¬ª",
        "¬´–î–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à—å –∂–∏—Ç—å –∫–∞–∫ –¥—Ä—É–≥–∏–µ –Ω–µ –º–æ–≥—É—Ç.¬ª"
    ]
    await update.message.reply_text(random.choice(quotes))

# ----------------- –ö–∞—Ä—Ç–∏–Ω–∫–∏: –∫–æ—Ç–∏–∫–∏, —Å–æ–±–∞–∫–∏, –º–µ–º—ã -----------------
async def cmd_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("cat")
    try:
        r = requests.get("https://api.thecatapi.com/v1/images/search", timeout=10).json()
        if isinstance(r, list) and r:
            await update.message.reply_photo(r[0]["url"])
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.exception("cat error: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞.")

async def cmd_dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("dog")
    try:
        r = requests.get("https://dog.ceo/api/breeds/image/random", timeout=10).json()
        await update.message.reply_photo(r["message"])
    except Exception as e:
        logger.exception("dog error: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–∞–∫–∏.")

async def cmd_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("meme")
    try:
        r = requests.get("https://meme-api.com/gimme", timeout=10).json()
        url = r.get("url")
        title = r.get("title", "–ú–µ–º")
        if url:
            await update.message.reply_photo(url, caption=title)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º.")
    except Exception as e:
        logger.exception("meme error: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞.")

async def cmd_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("dice")
    await update.message.reply_dice()

# ----------------- Donke: —à—É—Ç–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–∞ camdonke -----------------
async def cmd_donke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("donke")
    await update.message.reply_text(random.choice(donke_jokes))

async def cmd_camdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑ –≤ –¥–µ–Ω—å –º–æ–∂–µ—Ç '–∑–∞–ª–∏—Ç—å' –≤ Donke —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤"""
    inc_usage("camdonke")
    user = update.effective_user
    uid = str(user.id)
    entry = donke_store.get(uid, {"name": user.full_name, "total": 0, "last": None})
    if entry.get("last") == datetime.utcnow().date().isoformat():
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∑–∞–ª–∏–≤–∞–ª–∏ –≤ Donke. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    amount = random.randint(1, 100)
    entry["total"] = entry.get("total", 0) + amount
    entry["last"] = datetime.utcnow().date().isoformat()
    entry["name"] = user.full_name
    donke_store[uid] = entry
    save_json_safe(DONKE_FILE, donke_store)
    await update.message.reply_text(f"üí¶ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏–ª–∏ –≤ Donke {amount} –ª. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")

async def cmd_topdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("topdonke")
    if not donke_store:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ª–∏–≤–∞–ª.")
        return
    lst = sorted(donke_store.items(), key=lambda kv: kv[1].get("total", 0), reverse=True)[:50]
    lines = [f"{i+1}. {v[1].get('name','?')} ‚Äî {v[1].get('total',0)} –ª" for i,(k,v) in enumerate(lst)]
    await update.message.reply_text("\n".join(lines))

# ----------------- Helper: register core command handlers (to call later) -----------------
def register_entertainment_handlers(app: Application):
    app.add_handler(CommandHandler("joke", cmd_joke))
    app.add_handler(CommandHandler("addjoke", cmd_addjoke))
    app.add_handler(CommandHandler("fact", cmd_fact))
    app.add_handler(CommandHandler("quote", cmd_quote))
    app.add_handler(CommandHandler("cat", cmd_cat))
    app.add_handler(CommandHandler("dog", cmd_dog))
    app.add_handler(CommandHandler("meme", cmd_meme))
    app.add_handler(CommandHandler("dice", cmd_dice))
    app.add_handler(CommandHandler("donke", cmd_donke))
    app.add_handler(CommandHandler("camdonke", cmd_camdonke))
    app.add_handler(CommandHandler("topdonke", cmd_topdonke))# ================= –ß–∞—Å—Ç—å 3: –ú–æ–¥–µ—Ä–∞—Ü–∏—è, –∞–Ω—Ç–∏-–º–∞—Ç, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ =================

# ----- –ú–æ–¥–µ—Ä–∞—Ü–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ /, –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º) -----
MOD_WORDS = {
    "–≤–∞—Ä–Ω": "warn",
    "–º—É—Ç": "mute",
    "—Ä–∞–∑–º—É—Ç": "unmute",
    "–∞–Ω–º—É—Ç": "unmute",
    "–±–∞–Ω": "ban",
    "–∞–Ω–±–∞–Ω": "unban",
    "—Ä–∞–∑–±–∞–Ω": "unban"
}

async def handle_moderation_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–∞-–º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not update.message.reply_to_message:
        return
    text = update.message.text.lower().strip()
    action = MOD_WORDS.get(text)
    if not action:
        return
    chat_id = update.effective_chat.id
    target_user = update.message.reply_to_message.from_user
    try:
        if action == "warn":
            await update.message.reply_text(f"‚ö†Ô∏è {target_user.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!")
        elif action == "mute":
            until = datetime.utcnow() + timedelta(hours=1)
            await context.bot.restrict_chat_member(chat_id, target_user.id, ChatPermissions(can_send_messages=False), until_date=until)
            await update.message.reply_text(f"üîá {target_user.full_name} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 1 —á–∞—Å!")
        elif action == "unmute":
            await context.bot.restrict_chat_member(chat_id, target_user.id, ChatPermissions(can_send_messages=True))
            await update.message.reply_text(f"üîä {target_user.full_name} —Ä–∞–∑–º—å—é—á–µ–Ω!")
        elif action == "ban":
            await context.bot.ban_chat_member(chat_id, target_user.id)
            await update.message.reply_text(f"‚õî {target_user.full_name} –∑–∞–±–∞–Ω–µ–Ω!")
        elif action == "unban":
            await context.bot.unban_chat_member(chat_id, target_user.id)
            await update.message.reply_text(f"‚ôªÔ∏è {target_user.full_name} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# ----- –ê–Ω—Ç–∏-–º–∞—Ç -----
BAD_WORDS = {"–ª–æ—Ö", "–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "–¥–µ–±–∏–ª", "—Å—É–∫–∞", "–±–ª—è–¥—å", "—Ö—É–π", "–ø–∏–¥–æ—Ä", "—à–ª—é—Ö–∞", "–≥–∞–Ω–¥–æ–Ω"}

async def cmd_antimat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –º–∞—Ç–∞ –¥–ª—è —á–∞—Ç–∞"""
    chat_id = str(update.effective_chat.id)
    settings_store.setdefault("antimat", {})
    settings_store["antimat"][chat_id] = not settings_store["antimat"].get(chat_id, False)
    save_json_safe(SETTINGS_FILE, settings_store)
    state = "–≤–∫–ª—é—á—ë–Ω" if settings_store["antimat"][chat_id] else "–≤—ã–∫–ª—é—á–µ–Ω"
    await update.message.reply_text(f"üõ° –ê–Ω—Ç–∏-–º–∞—Ç —Ç–µ–ø–µ—Ä—å {state} –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

async def check_antimat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç"""
    chat_id = str(update.effective_chat.id)
    if not settings_store.get("antimat", {}).get(chat_id, False):
        return
    if any(bad in update.message.text.lower() for bad in BAD_WORDS):
        try:
            await update.message.delete()
            await update.message.reply_text("üõë –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞.")
        except:
            pass

# ----- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ -----
async def download_media(url: str, audio_only=False):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ (–≤–∏–¥–µ–æ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ) —á–µ—Ä–µ–∑ yt_dlp"""
    ydl_opts = {
        "outtmpl": "downloads/%(title)s.%(ext)s",
        "format": "bestaudio/best" if audio_only else "best",
        "quiet": True,
        "noplaylist": True,
    }
    Path("downloads").mkdir(exist_ok=True)
    loop = asyncio.get_event_loop()
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await loop.run_in_executor(None, lambda: ydl.extract_info(url, download=True))
            file_path = Path(ydl.prepare_filename(info))
        return file_path
    except Exception as e:
        logger.exception("download_media error: %s", e)
        return None

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç"""
    url = update.message.text.strip()
    if not any(host in url for host in ["youtube.com", "youtu.be", "tiktok.com"]):
        return
    keyboard = [
        [InlineKeyboardButton("üìπ –í–∏–¥–µ–æ", callback_data=f"video|{url}")],
        [InlineKeyboardButton("üéµ –ê—É–¥–∏–æ", callback_data=f"audio|{url}")]
    ]
    await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))

async def process_download_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice, url = query.data.split("|", 1)
    audio_only = choice == "audio"
    msg = await query.edit_message_text("‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    file_path = await download_media(url, audio_only=audio_only)
    if not file_path:
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
        return
    try:
        with open(file_path, "rb") as f:
            if audio_only:
                await query.message.reply_audio(f)
            else:
                await query.message.reply_video(f)
        os.remove(file_path)
        await msg.delete()
    except Exception as e:
        await msg.edit_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")

# ----------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏/–∞–Ω—Ç–∏-–º–∞—Ç–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è -----------------
def register_moderation_handlers(app: Application):
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_moderation_keywords))
    app.add_handler(CommandHandler("antimat", cmd_antimat))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_antimat))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    app.add_handler(CallbackQueryHandler(process_download_choice))# ================= –ß–∞—Å—Ç—å 4: –ú–µ–Ω—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥, –∑–∞–ø—É—Å–∫ =================

import asyncio
from telegram import BotCommandScopeDefault, BotCommandScopeAllPrivateChats, BotCommandScopeAllGroupChats

# ---------- UI: start / menu ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc_usage("start")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="menu:entertain")],
        [InlineKeyboardButton("üé• –ú–µ–¥–∏–∞ (—Å–∫–∞—á–∞—Ç—å)", callback_data="menu:media")],
        [InlineKeyboardButton("üòà Donke", callback_data="menu:donke")],
        [InlineKeyboardButton("üõ° –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="menu:moderation")],
        [InlineKeyboardButton("üîé –ü–æ–ª–µ–∑–Ω–æ–µ", callback_data="menu:useful")],
    ])
    text = "üëã *MultiBotX* ‚Äî –ø—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏ /menu."
    try:
        await update.message.reply_markdown(text, reply_markup=kb)
    except Exception:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ /menu –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø MultiBotX ‚Äî –±–æ—Ç —Å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏, –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –º–µ–¥–∏–∞.\n"
        "–í–≤–µ–¥–∏ /menu –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é."
    )

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è —Ç–æ–π –∂–µ —Ä–∞–∑–º–µ—Ç–∫–æ–π)
    await start_cmd(update, context)

# ---------- Commands registration (robust, async) ----------
BOT_COMMANDS_LIST = [(c.command, c.description) for c in BOT_COMMANDS]

async def _set_commands_once(bot):
    commands = [BotCommand(name, desc) for name, desc in BOT_COMMANDS_LIST]
    scopes = [BotCommandScopeDefault(), BotCommandScopeAllPrivateChats(), BotCommandScopeAllGroupChats()]
    last_exc = None
    for attempt in range(1, 4):
        try:
            for scope in scopes:
                await bot.set_my_commands(commands, scope=scope)
            logger.info("Commands set (attempt %d)", attempt)
            return True
        except Exception as e:
            last_exc = e
            logger.warning("set_my_commands attempt %d failed: %s", attempt, e)
            await asyncio.sleep(2 * attempt)
    logger.exception("Failed to set commands after attempts: %s", last_exc)
    return False

def register_commands_sync(app_obj):
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(_set_commands_once(app_obj.bot))
        loop.close()
    except Exception:
        logger.exception("register_commands_sync failed")

# Manual handlers to set/check commands from chat
async def setcommands_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # allow only admin or chat admins
    allowed = False
    if ADMIN_ID and str(user.id) == str(ADMIN_ID):
        allowed = True
    try:
        member = await update.effective_chat.get_member(user.id)
        if member.status in ("administrator", "creator"):
            allowed = True
    except Exception:
        if update.effective_chat.type == "private":
            allowed = True
    if not allowed:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
        return
    await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é –∫–æ–º–∞–Ω–¥—ã... –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
    try:
        ok = await _set_commands_once(context.bot)
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, —Å–º. –ª–æ–≥–∏.")
    except Exception as e:
        log_error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥.")

async def checkcommands_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cmds = await context.bot.get_my_commands()
        if not cmds:
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            return
        lines = [f"/{c.command} ‚Äî {c.description}" for c in cmds]
        await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(lines))
    except Exception as e:
        log_error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥.")

# ---------- Register all handlers into application ----------
def build_application():
    app = Application.builder().token(BOT_TOKEN).build()

    # basic commands / menu
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("menu", menu_cmd))

    # entertainment / data
    register_entertainment_handlers(app)

    # moderation / antimat / download
    register_moderation_handlers(app)

    # manual commands for commands management
    app.add_handler(CommandHandler("setcommands", setcommands_cmd))
    app.add_handler(CommandHandler("checkcommands", checkcommands_cmd))

    # other utilities
    app.add_handler(CommandHandler("remindme", remindme_cmd))
    app.add_handler(CommandHandler("searchimage", searchimage_cmd))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CommandHandler("avatar", avatar_cmd))

    # ensure error handler registered if exists
    try:
        app.add_error_handler(error_handler)
    except Exception:
        pass

    return app

# ---------- Reminder worker starter ----------
def start_reminder_worker(app):
    thr = threading.Thread(target=lambda: reminder_worker(app), daemon=True)
    thr.start()

# ---------- Run: Flask (health) + Bot (polling) ----------
def run():
    application = build_application()

    # register commands on start (if enabled)
    if COMMANDS_SETUP:
        logger.info("COMMANDS_SETUP enabled ‚Äî registering commands...")
        register_commands_sync(application)

    # start Flask health server on separate thread
    flask_thr = threading.Thread(target=lambda: flask_app.run(host="0.0.0.0", port=PORT), daemon=True)
    flask_thr.start()
    logger.info("Flask health server started on port %s", PORT)

    # start reminder worker
    try:
        start_reminder_worker(application)
    except Exception:
        logger.exception("Failed to start reminder worker")

    # run bot polling
    logger.info("Starting bot polling...")
    application.run_polling()

if __name__ == "__main__":
    run()