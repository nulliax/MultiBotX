import os
import random
import time
import logging
import requests
from datetime import datetime, timedelta
from flask import Flask, request
from threading import Thread
from collections import defaultdict
from telegram import Update, ChatPermissions
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TOKEN")
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –î–∞–Ω–Ω—ã–µ
warns = defaultdict(int)
donke_data = defaultdict(lambda: {'liters': 0, 'last': None})
log_data = []
start_time = time.time()

# –®—É—Ç–∫–∏ –∏ —Ü–∏—Ç–∞—Ç—ã
jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –¢–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤.",
    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –∫–æ—Ç–∏–∫–æ–≤ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–∞–±–µ–ª—å.",
    "–Ø –Ω–µ –ª–µ–Ω—Ç—è–π, —è –≤ —Ä–µ–∂–∏–º–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è."
]

donke_jokes = [
    "Donke –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ç—É–ø–æ–π, —á—Ç–æ –¥—É–º–∞–µ—Ç, —á—Ç–æ RAM ‚Äî —ç—Ç–æ –±–∞—Ä–∞—à–µ–∫.",
    "Donke –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–µ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç‚Ä¶ —Ç–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ —Å–∏–Ω—è–∫.",
    "Donke ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞ 404: –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    "Donke ‚Äî –∂–∏–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —á—Ç–æ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞."
]

quotes = [
    "–ë—É–¥—å —Å–æ–±–æ–π ‚Äî –ø—Ä–æ—á–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.",
    "–ù–µ –±–æ–π—Å—è –∏–¥—Ç–∏ –º–µ–¥–ª–µ–Ω–Ω–æ, –±–æ–π—Å—è —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.",
    "–¢–æ—Ç, –∫—Ç–æ —Ö–æ—á–µ—Ç ‚Äî –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç ‚Äî –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ.",
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –º—ã —Ä–æ–∂–¥–∞–µ–º—Å—è –≤–Ω–æ–≤—å. –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è ‚Äî –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ."
]

facts = [
    "–ú—É—Ä–∞–≤—å–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç.",
    "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å–Ω–µ–∂–∏–Ω–∫–∞ ‚Äî 38 —Å–º.",
    "–ü—á—ë–ª—ã –º–æ–≥—É—Ç —É–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ –ª—é–¥–µ–π."
]

# Flask
@app.route('/')
def index():
    return "MultiBotX is running!"

@app.route('/' + TOKEN, methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return 'ok'

# –•—ç–Ω–¥–ª–µ—Ä—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî MultiBotX. –ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß† *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "- /joke ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n"
        "- /donke ‚Äî —á—ë—Ä–Ω—ã–π —é–º–æ—Ä –ø—Ä–æ Donke\n"
        "- /fact ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "- /quote ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"
        "- /cat /dog ‚Äî —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ –∏ —Å–æ–±–∞–∫\n"
        "- /dice ‚Äî –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ üé≤\n"
        "- /camdonke ‚Äî üí¶ –∑–∞–ª–∏–≤–∫–∞ –≤ –î–æ–Ω–∫–µ\n"
        "- /topdonke ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–Ω–∫–æ–∑–∞–ª–∏–≤–∞—Ç–µ–ª–µ–π\n"
        "- /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "- /log ‚Äî –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "- –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –º—É—Ç, –±–∞–Ω, –≤–∞—Ä–Ω –∏ —Ç.–¥."
    , parse_mode='Markdown')

async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(jokes))

async def donke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(donke_jokes))

async def fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(facts))

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(quotes))

async def cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    res = requests.get("https://api.thecatapi.com/v1/images/search").json()
    await update.message.reply_photo(res[0]['url'])

async def dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    res = requests.get("https://dog.ceo/api/breeds/image/random").json()
    await update.message.reply_photo(res['message'])

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_dice()

# Donke –ö–∞–º–ø–∞–Ω–∏—è
async def camdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    today = datetime.utcnow().date()
    data = donke_data[user_id]

    if data['last'] == today:
        await update.message.reply_text("üí¶ –í—ã —É–∂–µ –∑–∞–ª–∏–ª–∏ –≤ –î–æ–Ω–∫–µ —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.")
        return

    liters = random.randint(1, 100)
    data['liters'] += liters
    data['last'] = today

    await update.message.reply_text(
        f"üí¶ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏–ª–∏ –≤ –î–æ–Ω–∫–µ {liters} –ª–∏—Ç—Ä–æ–≤ —Å–ø–µ—Ä–º—ã!\n"
        f"Donke –≥–æ–≤–æ—Ä–∏—Ç —Å–ø–∞—Å–∏–±–æ... –∏ —Å—Ç–æ–Ω–µ—Ç..."
    )

async def topdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top = sorted(donke_data.items(), key=lambda x: x[1]['liters'], reverse=True)[:50]
    msg = "üèÜ *–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –≤ Donke:*\n\n"
    for i, (user_id, data) in enumerate(top, start=1):
        msg += f"{i}. [id:{user_id}] ‚Äî {data['liters']} –ª–∏—Ç—Ä–æ–≤\n"
    await update.message.reply_text(msg, parse_mode='Markdown')

# –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∑–∫–∞
async def download_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    if "tiktok.com" in url:
        api_url = f"https://api.tikmate.app/api/lookup?url={url}"
    elif "youtube.com" in url or "youtu.be" in url:
        api_url = f"https://api.yt1s.com/api/ajaxSearch/index?q={url}&vt=home"
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    await update.message.reply_text("‚è≥ –ü—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ...")

    try:
        r = requests.get(api_url)
        if r.status_code == 200:
            await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏).")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è
async def moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        text = update.message.text.lower()
        target = update.message.reply_to_message.from_user
        chat_id = update.effective_chat.id

        try:
            if "–≤–∞—Ä–Ω" in text:
                warns[target.id] += 1
                await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {target.first_name} ({warns[target.id]}/3)")
            elif "–º—É—Ç" in text:
                await context.bot.restrict_chat_member(chat_id, target.id, ChatPermissions(can_send_messages=False))
                await update.message.reply_text(f"üîá {target.first_name} –±—ã–ª –∑–∞–º—É—á–µ–Ω.")
            elif "—Ä–∞–∑–º—É—Ç" in text or "–∞–Ω–º—É—Ç" in text:
                await context.bot.restrict_chat_member(chat_id, target.id, ChatPermissions(can_send_messages=True))
                await update.message.reply_text(f"üîä {target.first_name} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.")
            elif "–±–∞–Ω" in text:
                await context.bot.ban_chat_member(chat_id, target.id)
                await update.message.reply_text(f"‚õî {target.first_name} –∑–∞–±–∞–Ω–µ–Ω.")
            elif "—Ä–∞–∑–±–∞–Ω" in text or "—É–Ω–±–∞–Ω" in text:
                await context.bot.unban_chat_member(chat_id, target.id)
                await update.message.reply_text(f"‚úÖ {target.first_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except:
            await update.message.reply_text("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")

# –ê–≤—Ç–æ—Ñ—É–Ω–∫—Ü–∏–∏
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}!")

async def mat_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.lower()
    if any(mat in msg for mat in ["–±–ª—è–¥", "—Å—É–∫–∞", "–Ω–∞—Ö", "—á–º–æ", "–ø–∏–¥", "—Ö—É–π"]):
        await update.message.delete()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = int(time.time() - start_time)
    users = len(donke_data)
    await update.message.reply_text(f"üìä Uptime: {uptime//60} –º–∏–Ω—É—Ç\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if log_data:
        await update.message.reply_text("üóÇÔ∏è –õ–æ–≥:\n" + "\n".join(log_data[-10:]))
    else:
        await update.message.reply_text("üì≠ –õ–æ–≥ –ø—É—Å—Ç.")

async def save_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_data.append(f"{update.effective_user.id}: {update.message.text}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("joke", joke))
application.add_handler(CommandHandler("donke", donke))
application.add_handler(CommandHandler("fact", fact))
application.add_handler(CommandHandler("quote", quote))
application.add_handler(CommandHandler("cat", cat))
application.add_handler(CommandHandler("dog", dog))
application.add_handler(CommandHandler("dice", dice))
application.add_handler(CommandHandler("camdonke", camdonke))
application.add_handler(CommandHandler("topdonke", topdonke))
application.add_handler(CommandHandler("stats", stats))
application.add_handler(CommandHandler("log", log))

application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, moderation))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'https?://'), download_video))
application.add_handler(MessageHandler(filters.TEXT, save_log))
application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
application.add_handler(MessageHandler(filters.TEXT, mat_filter))

# –ó–∞–ø—É—Å–∫ Flask
def run():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

Thread(target=run).start()
application.run_polling() 