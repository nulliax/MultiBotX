import os
import random
import logging
import requests
from flask import Flask, request
from telegram import Update, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from datetime import datetime, timedelta
import yt_dlp

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

app = Flask(__name__)
bot_app = Application.builder().token(TOKEN).build()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
warns = {}
mutes = {}
camdonke_db = {}
last_camdonke = {}

# --- –£–¢–ò–õ–ò–¢–´ ---

def log_command(user, command):
    logging.info(f"{user.full_name} ({user.id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª: {command}")

def is_admin(user_id):
    return user_id in ADMIN_IDS

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø ---

jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ OCT 31 == DEC 25.",
    "–ñ–µ–Ω–∞: ¬´–¢—ã –æ–ø—è—Ç—å —Å–∏–¥–∏—à—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?!¬ª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: ¬´–ù–µ—Ç, —è —Å–∏–∂—É –ø–µ—Ä–µ–¥...¬ª",
    "‚Äî –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É?\n‚Äî –ù–∏ –æ–¥–Ω–æ–≥–æ. –≠—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞."
]

facts = [
    "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å–Ω–µ–∂–∏–Ω–∫–∞ –∏–º–µ–ª–∞ –¥–∏–∞–º–µ—Ç—Ä 38 —Å–º.",
    "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–ü—á—ë–ª—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Å–≤–µ—Ç."
]

quotes = [
    "¬´–ë—É–¥—å —Å–æ–±–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã¬ª ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥.",
    "¬´–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º, –∞ —Å –æ–ø—ã—Ç–æ–º¬ª ‚Äî –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω.",
    "¬´–ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ—à—å¬ª ‚Äî –°–æ–∫—Ä–∞—Ç."
]

donke_jokes = [
    "Donke –æ–¥–Ω–∞–∂–¥—ã —É–ø–∞–ª‚Ä¶ –ó–µ–º–ª—è –æ—Ç—Å–∫–æ—á–∏–ª–∞.",
    "–ï—Å–ª–∏ Donke —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è ‚Äî —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª.",
    "Donke –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è Google, Google –ø–æ–ª—å–∑—É–µ—Ç—Å—è Donke."
]

# --- –ö–û–ú–ê–ù–î–´ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_command(update.effective_user, "/start")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø MultiBotX. –ü–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_command(update.effective_user, "/help")
    await update.message.reply_text("""
üìã *–ö–æ–º–∞–Ω–¥—ã*:
üéâ /joke ‚Äì –®—É—Ç–∫–∞  
üìö /fact ‚Äì –§–∞–∫—Ç  
üß† /quote ‚Äì –¶–∏—Ç–∞—Ç–∞  
üê± /cat ‚Äì –ö–æ—Ç  
üê∂ /dog ‚Äì –ü—ë—Å  
üé≤ /dice ‚Äì –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫  
üß™ /camdonke ‚Äì –ó–∞–ª–∏—Ç—å –≤ Donke  
üèÜ /topdonke ‚Äì –¢–æ–ø Donke  
üé¨ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok/YouTube ‚Äî —è —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ

üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–æ—Ç–≤–µ—Ç–æ–º): –≤–∞—Ä–Ω, –º—É—Ç, —Ä–∞–∑–º—É—Ç, –±–∞–Ω, –∞–Ω–±–∞–Ω
""", parse_mode="Markdown")

async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(jokes))

async def fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(facts))

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(quotes))

async def cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://cataas.com/cat"
    await update.message.reply_photo(url)

async def dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    r = requests.get("https://dog.ceo/api/breeds/image/random").json()
    await update.message.reply_photo(r['message'])

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_dice()

# --- DONKE ---

async def camdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = datetime.utcnow().date()
    if last_camdonke.get(user_id) == today:
        await update.message.reply_text("üí¶ –í—ã —É–∂–µ –∑–∞–ª–∏–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤ Donke!")
        return

    amount = random.randint(1, 100)
    camdonke_db[user_id] = camdonke_db.get(user_id, 0) + amount
    last_camdonke[user_id] = today
    await update.message.reply_text(
        f"üí¶ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏–ª–∏ {amount} –ª–∏—Ç—Ä–æ–≤ –≤ Donke!\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!"
    )

async def topdonke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top = sorted(camdonke_db.items(), key=lambda x: x[1], reverse=True)[:50]
    text = "üèÜ *–¢–û–ü Donke (–ª–∏—Ç—Ä—ã)*:\n"
    for i, (user_id, amount) in enumerate(top, 1):
        text += f"{i}. [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] ‚Äî {amount}–ª\n"
    await update.message.reply_text(text, parse_mode="Markdown")

# --- –ú–û–î–ï–†–ê–¶–ò–Ø ---

async def moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return

    text = update.message.text.lower()
    user = update.message.reply_to_message.from_user
    chat_id = update.message.chat_id

    if "–≤–∞—Ä–Ω" in text:
        warns[user.id] = warns.get(user.id, 0) + 1
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ {user.full_name}")
    elif "–º—É—Ç" in text:
        until = datetime.now() + timedelta(minutes=10)
        await context.bot.restrict_chat_member(chat_id, user.id, permissions=telegram.ChatPermissions(), until_date=until)
        await update.message.reply_text(f"üîá {user.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç")
    elif "—Ä–∞–∑–º—É—Ç" in text or "–∞–Ω–º—É—Ç" in text:
        await context.bot.restrict_chat_member(chat_id, user.id, permissions=telegram.ChatPermissions(can_send_messages=True))
        await update.message.reply_text(f"üîà {user.full_name} —Ä–∞–∑–º—É—á–µ–Ω")
    elif "–±–∞–Ω" in text:
        await context.bot.ban_chat_member(chat_id, user.id)
        await update.message.reply_text(f"‚õî {user.full_name} –∑–∞–±–∞–Ω–µ–Ω")
    elif "–∞–Ω–±–∞–Ω" in text:
        await context.bot.unban_chat_member(chat_id, user.id)
        await update.message.reply_text(f"‚úÖ {user.full_name} —Ä–∞–∑–±–∞–Ω–µ–Ω")

# --- –í–ò–î–ï–û ---

async def video_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    if "tiktok.com" in url or "youtube.com" in url or "youtu.be" in url:
        await update.message.reply_text("‚è¨ –ü—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ...")

        ydl_opts = {
            'outtmpl': 'video.%(ext)s',
            'format': 'mp4',
            'quiet': True
        }

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                video_file = ydl.prepare_filename(info)
                await update.message.reply_video(video=open(video_file, 'rb'))
                os.remove(video_file)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.\n–û—à–∏–±–∫–∞: {e}")

# --- –ê–í–¢–û–§–£–ù–ö–¶–ò–ò ---

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}!")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CommandHandler("help", help_command))
bot_app.add_handler(CommandHandler("joke", joke))
bot_app.add_handler(CommandHandler("fact", fact))
bot_app.add_handler(CommandHandler("quote", quote))
bot_app.add_handler(CommandHandler("cat", cat))
bot_app.add_handler(CommandHandler("dog", dog))
bot_app.add_handler(CommandHandler("dice", dice))
bot_app.add_handler(CommandHandler("camdonke", camdonke))
bot_app.add_handler(CommandHandler("topdonke", topdonke))

bot_app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, moderation))
bot_app.add_handler(MessageHandler(filters.TEXT & filters.Regex("http"), video_handler))
bot_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))

# --- FLASK (–¥–ª—è Render) ---

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot_app.bot)
    bot_app.update_queue.put(update)
    return "ok"

@app.route("/")
def index():
    return "MultiBotX —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    import telegram
    from telegram.constants import ChatAction

    bot_app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get('PORT', 5000)),
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )