import os
import json
import random
from flask import Flask, request
from datetime import datetime, timedelta
from threading import Thread
from telebot import TeleBot, types

app = Flask(__name__)
bot = TeleBot(os.getenv("TOKEN"))
bot.remove_webhook()

# === –§–ê–ô–õ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò DONKE ===
DONKE_FILE = "donke_stats.json"
if not os.path.exists(DONKE_FILE):
    with open(DONKE_FILE, "w") as f:
        json.dump({}, f)

def load_donke():
    with open(DONKE_FILE, "r") as f:
        return json.load(f)

def save_donke(data):
    with open(DONKE_FILE, "w") as f:
        json.dump(data, f, indent=2)

# === DONKE ===
@bot.message_handler(commands=["camdonke"])
def cam_donke(message):
    user_id = str(message.from_user.id)
    name = message.from_user.first_name
    data = load_donke()
    today = datetime.utcnow().date().isoformat()

    if user_id in data and data[user_id]["last"] == today:
        bot.reply_to(message, f"üòà {name}, –î–æ–Ω–∫–µ —É—Å—Ç–∞–ª... –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
        return

    liters = random.randint(1, 100)
    if user_id not in data:
        data[user_id] = {"name": name, "liters": 0, "last": ""}

    data[user_id]["liters"] += liters
    data[user_id]["last"] = today
    save_donke(data)

    bot.reply_to(message, f"üí¶ *–î–æ–Ω–∫–µ —Å–ª–∏–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–ø–ª–∏...*\n"
                          f"–í—ã –≤–ª–∏–ª–∏ –∞–∂ *{liters}* –ª–∏—Ç—Ä–æ–≤!\n"
                          f"_–î–æ –∑–∞–≤—Ç—Ä–∞, —á–µ–º–ø–∏–æ–Ω!_", parse_mode="Markdown")

@bot.message_handler(commands=["topdonke"])
def top_donke(message):
    data = load_donke()
    ranking = sorted(data.items(), key=lambda x: x[1]["liters"], reverse=True)[:50]
    text = "üèÜ *–¢–û–ü 50 –¥–æ–Ω–∫–µ—Ä–æ–≤:*\n\n"
    for i, (uid, udata) in enumerate(ranking, 1):
        text += f"{i}. {udata['name']} ‚Äî {udata['liters']}–ª\n"
    bot.reply_to(message, text, parse_mode="Markdown")

# === –ú–û–î–ï–†–ê–¶–ò–Ø ===
@bot.message_handler(func=lambda m: m.reply_to_message is not None and m.text.lower() in ["–º—É—Ç", "–≤–∞—Ä–Ω", "–±–∞–Ω", "—Ä–∞–∑–º—É—Ç", "–∞–Ω–º—É—Ç", "—É–Ω–±–∞–Ω"])
def moder_action(message):
    if not message.from_user.id in [admin.user.id for admin in bot.get_chat_administrators(message.chat.id)]:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    cmd = message.text.lower()
    user_id = message.reply_to_message.from_user.id
    if cmd == "–º—É—Ç":
        bot.restrict_chat_member(message.chat.id, user_id, until_date=datetime.now().timestamp() + 3600)
        bot.reply_to(message, "üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 —á–∞—Å.")
    elif cmd == "–≤–∞—Ä–Ω":
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    elif cmd == "–±–∞–Ω":
        bot.ban_chat_member(message.chat.id, user_id)
        bot.reply_to(message, "üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
    elif cmd in ["—Ä–∞–∑–º—É—Ç", "–∞–Ω–º—É—Ç"]:
        bot.restrict_chat_member(message.chat.id, user_id, can_send_messages=True)
        bot.reply_to(message, "üîà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")
    elif cmd == "—É–Ω–±–∞–Ω":
        bot.unban_chat_member(message.chat.id, user_id)
        bot.reply_to(message, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# === –§–ê–ù/–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø ===
jokes = [
    "–ü–æ—á–µ–º—É —É –î–æ–Ω–∫–µ –Ω–µ—Ç –¥—Ä—É–∑–µ–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω ‚Äî Donke.",
    "–ó–Ω–∞–µ—à—å –∫—Ç–æ —Ö—É–∂–µ —Å–ø–∞–º–∞? Donke.",
    "–ï—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ ‚Äî Donke —Ä—è–¥–æ–º.",
    "Donke –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ç—É–ø, —á—Ç–æ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ò–ò.",
    "Donke ‚Äî —ç—Ç–æ –¥–∏–∞–≥–Ω–æ–∑, –∞ –Ω–µ –∏–º—è.",
    # –µ—â—ë –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ...
]

facts = [
    "üß† –§–∞–∫—Ç: –£ —É–ª–∏—Ç–æ–∫ –µ—Å—Ç—å 14,000 –∑—É–±–æ–≤.",
    "üß† –§–∞–∫—Ç: –ú–µ–¥—É–∑—ã –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –î–æ–Ω–∫–µ.",
    "üß† –§–∞–∫—Ç: –°–ª–æ–Ω—ã –±–æ—è—Ç—Å—è –ø—á—ë–ª.",
    "üß† –§–∞–∫—Ç: –õ—é–¥–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ç–µ—Ö, –∫—Ç–æ –∑–Ω–∞–µ—Ç Donke‚Ä¶ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.",
]

quotes = [
    "üåü –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è. –ö—Ä–æ–º–µ –∫–∞–∫ —Å Donke.",
    "üåü –î–µ–ª–∞–π –¥–æ–±—Ä–æ –∏ –±—Ä–æ—Å–∞–π –µ–≥–æ –≤ Donke.",
    "üåü Donke ‚Äî —ç—Ç–æ –ø—É—Ç—å. –ù–æ –≤ —Ç—É–ø–∏–∫.",
]

@bot.message_handler(commands=["joke", "fact", "quote", "donke"])
def reply_fun(message):
    if message.text == "/joke":
        bot.reply_to(message, random.choice(jokes))
    elif message.text == "/fact":
        bot.reply_to(message, random.choice(facts))
    elif message.text == "/quote":
        bot.reply_to(message, random.choice(quotes))
    elif message.text == "/donke":
        bot.reply_to(message, random.choice(jokes + facts))

# === –õ–û–ì –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
@bot.message_handler(commands=["log"])
def admin_log(message):
    if not message.from_user.id in [admin.user.id for admin in bot.get_chat_administrators(message.chat.id)]:
        return
    data = load_donke()
    total = sum(u["liters"] for u in data.values())
    users = len(data)
    bot.reply_to(message, f"üìä –í –±–∞–∑–µ: {users} –¥–æ–Ω–∫–µ—Ä–æ–≤\nüí¶ –í—Å–µ–≥–æ —Å–ª–∏—Ç–æ: {total} –ª–∏—Ç—Ä–æ–≤.")

# === START ===
@bot.message_handler(commands=["start", "help"])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("/joke", "/fact", "/quote")
    kb.row("/camdonke", "/topdonke")
    bot.send_message(message.chat.id,
                     "üëã –ü—Ä–∏–≤–µ—Ç, —è *MultiBotX* ‚Äî —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç!\n\n"
                     "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                     "‚Ä¢ /joke ‚Äì —à—É—Ç–∫–∞\n"
                     "‚Ä¢ /fact ‚Äì —Ñ–∞–∫—Ç\n"
                     "‚Ä¢ /quote ‚Äì —Ü–∏—Ç–∞—Ç–∞\n"
                     "‚Ä¢ /camdonke ‚Äì —Å–ª–∏—Ç—å –≤ –î–æ–Ω–∫–µ\n"
                     "‚Ä¢ /topdonke ‚Äì —Ä–µ–π—Ç–∏–Ω–≥ –î–æ–Ω–∫–µ\n"
                     "‚Ä¢ /donke ‚Äì –≤—Å—ë –∏ —Å—Ä–∞–∑—É\n"
                     "‚Ä¢ /log ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
                     "–ò –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏: –º—É—Ç, –±–∞–Ω, –∞–Ω–º—É—Ç (–ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)", parse_mode="Markdown", reply_markup=kb)

# === FLASK –•–û–°–¢–ò–ù–ì ===
@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':
        bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
        return 'ok', 200
    else:
        bot.remove_webhook()
        bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}")
        return 'Webhook set', 200

def run():
    app.run(host='0.0.0.0', port=10000)

Thread(target=run).start()