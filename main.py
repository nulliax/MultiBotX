import os
import logging
import random
import re
import threading
from flask import Flask, request
from dotenv import load_dotenv
from telegram import Update, ChatPermissions, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, CallbackContext
)
import requests
import yt_dlp

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
PORT = int(os.environ.get("PORT", 8443))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask —Å–µ—Ä–≤–µ—Ä
flask_app = Flask(__name__)

# Telegram Application
app = ApplicationBuilder().token(TOKEN).build()

# ============================
#        –ú–û–î–ï–†–ê–¶–ò–Ø
# ============================

warns = {}

async def warn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        user_id = update.message.reply_to_message.from_user.id
        warns[user_id] = warns.get(user_id, 0) + 1
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ. –í—Å–µ–≥–æ: {warns[user_id]}")
        if warns[user_id] >= 3:
            await update.effective_chat.ban_member(user_id)
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
            warns[user_id] = 0
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        await update.effective_chat.restrict_member(
            update.message.reply_to_message.from_user.id,
            ChatPermissions(can_send_messages=False)
        )
        await update.message.reply_text("üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω.")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞.")

async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        await update.effective_chat.restrict_member(
            update.message.reply_to_message.from_user.id,
            ChatPermissions(can_send_messages=True,
                            can_send_media_messages=True,
                            can_send_other_messages=True,
                            can_add_web_page_previews=True)
        )
        await update.message.reply_text("üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        await update.effective_chat.ban_member(update.message.reply_to_message.from_user.id)
        await update.message.reply_text("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        await update.effective_chat.unban_member(update.message.reply_to_message.from_user.id)
        await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# ============================
#        –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø
# ============================

jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ OCT 31 == DEC 25!",
    "–ö–∞–∫ –ø–æ–π–º–∞—Ç—å –±–µ–ª–æ–≥–æ –º–µ–¥–≤–µ–¥—è? –ü—Ä–æ—Ä—É–±–∏ –≤ –ª—å–¥—É –ø—Ä–æ—Ä—É–±—å –∏ —Ä–∞—Å—Å—ã–ø—å –≥–æ—Ä–æ—Ö. –ö–æ–≥–¥–∞ –º–µ–¥–≤–µ–¥—å –ø—Ä–∏–¥–µ—Ç —Å–æ–±—Ä–∞—Ç—å –≥–æ—Ä–æ—Ö ‚Äî –±–µ–π –µ–≥–æ –ª–µ–¥–æ—Ä—É–±–æ–º!",
    "–Ø –±—ã –ø–æ—à—É—Ç–∏–ª –ø—Ä–æ UDP‚Ä¶ –Ω–æ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—à—å."
]

facts = [
    "–§–∞–∫—Ç: –£ —É–ª–∏—Ç–æ–∫ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–§–∞–∫—Ç: –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ —É –º–µ–¥—É–∑—ã ‚Äì –±–µ—Å—Å–º–µ—Ä—Ç–∏–µ.",
    "–§–∞–∫—Ç: –£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–∏–Ω—è—è –∫—Ä–æ–≤—å."
]

quotes = [
    "‚Äú–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã.‚Äù ‚Äî –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
    "‚Äú–ë—É–¥—å —Å–æ–±–æ–π. –ü—Ä–æ—á–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.‚Äù ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
    "‚Äú–õ—É—á—à–∞—è –º–µ—Å—Ç—å ‚Äî –æ–≥—Ä–æ–º–Ω—ã–π —É—Å–ø–µ—Ö.‚Äù ‚Äî –§—Ä—ç–Ω–∫ –°–∏–Ω–∞—Ç—Ä–∞"
]

donke_jokes = [
    "Donke –ø—Ä–∏—à—ë–ª –≤ –±–∞—Ä... –ë–∞—Ä —Å–ª–æ–º–∞–ª—Å—è.",
    "Donke –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ç—É–ø–æ–π, —á—Ç–æ –µ–≥–æ IQ –º–æ–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.",
    "–ï—Å–ª–∏ –±—ã —Ç—É–ø–æ—Å—Ç—å –±—ã–ª–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π, Donke –ø–æ–ª—É—á–∏–ª –±—ã –ù–æ–±–µ–ª–µ–≤–∫—É."
]

async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(jokes))

async def fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(facts))

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(quotes))

async def cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://cataas.com/cat"
    await update.message.reply_photo(photo=url)

async def dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = requests.get("https://random.dog/woof.json").json()["url"]
    await update.message.reply_photo(photo=url)

async def meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://meme-api.com/gimme"
    meme = requests.get(url).json()
    await update.message.reply_photo(photo=meme["url"], caption=meme["title"])

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_dice()

# ============================
#        –í–ò–î–ï–û –°–ö–ê–ß–ò–í–ê–ù–ò–ï
# ============================

def download_video(url):
    ydl_opts = {
        'outtmpl': 'video.%(ext)s',
        'format': 'mp4',
        'quiet': True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        return ydl.prepare_filename(info)

async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ YouTube.")
        return
    url = context.args[0]
    msg = await update.message.reply_text("‚è¨ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏...")

    try:
        video_path = download_video(url)
        with open(video_path, 'rb') as video_file:
            await update.message.reply_video(video=video_file)
        os.remove(video_path)
    except Exception as e:
        await msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

# ============================
#        –ü–ê–°–•–ê–õ–ö–ê
# ============================

async def donke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(donke_jokes))

# ============================
#       –ê–í–¢–û–§–£–ù–ö–¶–ò–ò
# ============================

async def greet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}", parse_mode='HTML')

# –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞
banned_words = ["–ø–ª–æ—Ö–æ–µ", "—Å–ª–æ–≤–æ", "–º–∞—Ç"]

async def filter_bad_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if any(word in update.message.text.lower() for word in banned_words):
        await update.message.delete()

# ============================
#        –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ============================

app.add_handler(CommandHandler("start", lambda u, c: u.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø MultiBotX.")))
app.add_handler(CommandHandler("help", lambda u, c: u.message.reply_text("/joke /fact /quote /cat /dog /meme /dice /download [url]")))
app.add_handler(CommandHandler("warn", warn))
app.add_handler(CommandHandler("mute", mute))
app.add_handler(CommandHandler("unmute", unmute))
app.add_handler(CommandHandler("ban", ban))
app.add_handler(CommandHandler("unban", unban))
app.add_handler(CommandHandler("joke", joke))
app.add_handler(CommandHandler("fact", fact))
app.add_handler(CommandHandler("quote", quote))
app.add_handler(CommandHandler("cat", cat))
app.add_handler(CommandHandler("dog", dog))
app.add_handler(CommandHandler("meme", meme))
app.add_handler(CommandHandler("dice", dice))
app.add_handler(CommandHandler("download", download))
app.add_handler(CommandHandler("donke", donke))
app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), filter_bad_words))

# ============================
#       FLASK + POLLING
# ============================

@flask_app.route("/")
def home():
    return "MultiBotX is alive!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=PORT)

def run_polling():
    app.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    run_polling()