import os
import logging
import random
import re
import time
from datetime import datetime, timedelta

import requests
from flask import Flask, request
from telebot import TeleBot, types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SAVE_TUBE_API_KEY = os.getenv("SAVE_TUBE_API_KEY")
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not RENDER_EXTERNAL_HOSTNAME:
    raise ValueError("RENDER_EXTERNAL_HOSTNAME –Ω–µ –Ω–∞–π–¥–µ–Ω")

# Flask
app = Flask(__name__)
bot = TeleBot(BOT_TOKEN)

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}/"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞—Ä–Ω–æ–≤ –∏ –º—É—Ç–∞
warns = {}
mutes = {}
admins = []

# –§–∏–ª—å—Ç—Ä—ã
bad_words = ['badword1', 'badword2', '—Å—É–∫–∞', '–±–ª—è', '–Ω–∞—Ö—É–π']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî MultiBotX. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

@bot.message_handler(commands=['help'])
def help_cmd(message):
    text = (
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã MultiBotX:</b>\n"
        "\n<b>üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è</b>\n"
        "–º—É—Ç, —Ä–∞–∑–º—É—Ç, –±–∞–Ω, —Ä–∞–∑–±–∞–Ω, –≤–∞—Ä–Ω (–∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "\n<b>üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b>\n"
        "/joke ‚Äì —à—É—Ç–∫–∞\n"
        "/fact ‚Äì —Ñ–∞–∫—Ç\n"
        "/quote ‚Äì —Ü–∏—Ç–∞—Ç–∞\n"
        "/meme ‚Äì –º–µ–º\n"
        "/cat ‚Äì –∫–æ—Ç\n"
        "/dog ‚Äì —Å–æ–±–∞–∫–∞\n"
        "/dice ‚Äì üé≤\n"
        "\n<b>üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ YouTube\n"
        "\n<b>üëª –ü–∞—Å—Ö–∞–ª–∫–∏</b>\n"
        "donke, camdonke, topdonke\n"
    )
    bot.send_message(message.chat.id, text, parse_mode="HTML")

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è –±–µ–∑ /
@bot.message_handler(func=lambda m: m.reply_to_message and m.text and m.text.lower() in ['–º—É—Ç', '—Ä–∞–∑–º—É—Ç', '–±–∞–Ω', '—Ä–∞–∑–±–∞–Ω', '–≤–∞—Ä–Ω'])
def handle_moderation(message):
    if message.from_user.id not in admins:
        return bot.reply_to(message, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    command = message.text.lower()
    target = message.reply_to_message.from_user
    if command == '–≤–∞—Ä–Ω':
        warns[target.id] = warns.get(target.id, 0) + 1
        bot.reply_to(message, f"‚ö†Ô∏è {target.first_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warns[target.id]}/3)")
        if warns[target.id] >= 3:
            bot.ban_chat_member(message.chat.id, target.id)
            bot.send_message(message.chat.id, f"‚õî {target.first_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
            warns[target.id] = 0
    elif command == '–º—É—Ç':
        until = datetime.utcnow() + timedelta(minutes=30)
        bot.restrict_chat_member(message.chat.id, target.id, permissions=types.ChatPermissions(can_send_messages=False), until_date=until)
        bot.reply_to(message, f"üîá {target.first_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç.")
    elif command == '—Ä–∞–∑–º—É—Ç':
        bot.restrict_chat_member(message.chat.id, target.id, permissions=types.ChatPermissions(can_send_messages=True))
        bot.reply_to(message, f"üîä {target.first_name} —Ä–∞–∑–º—É—á–µ–Ω.")
    elif command == '–±–∞–Ω':
        bot.ban_chat_member(message.chat.id, target.id)
        bot.reply_to(message, f"‚õî {target.first_name} –∑–∞–±–∞–Ω–µ–Ω.")
    elif command == '—Ä–∞–∑–±–∞–Ω':
        bot.unban_chat_member(message.chat.id, target.id)
        bot.reply_to(message, f"‚úÖ {target.first_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# –ê–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_user(message):
    for user in message.new_chat_members:
        bot.send_message(message.chat.id, f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!")

# –ê–Ω—Ç–∏–º–∞—Ç
@bot.message_handler(func=lambda message: True)
def check_message(message):
    if message.text:
        if any(bad in message.text.lower() for bad in bad_words):
            bot.delete_message(message.chat.id, message.message_id)
        if message.text.lower() == "donke":
            bot.reply_to(message, "ü¶ç Donke detected! –°–ø—Ä—è—á—å—Ç–µ –±–∞–Ω–∞–Ω—ã!")
        elif 'youtube.com' in message.text or 'tiktok.com' in message.text:
            download_video(message)

# –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
@bot.message_handler(commands=['joke'])
def joke(message):
    jokes = ["–ü–æ—á–µ–º—É —É—Ç–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ donke!", "–ö–∞–∫ –∑–æ–≤—É—Ç –æ—Å–ª–∞ –±–µ–∑ —à—É—Ç–æ–∫? –ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."]
    bot.reply_to(message, random.choice(jokes))

@bot.message_handler(commands=['fact'])
def fact(message):
    facts = ["üêò –°–ª–æ–Ω—ã –Ω–µ —É–º–µ—é—Ç –ø—Ä—ã–≥–∞—Ç—å.", "üöÄ –°–≤–µ—Ç –æ—Ç –°–æ–ª–Ω—Ü–∞ –¥–æ—Ö–æ–¥–∏—Ç –∑–∞ 8 –º–∏–Ω—É—Ç."]
    bot.reply_to(message, random.choice(facts))

@bot.message_handler(commands=['quote'])
def quote(message):
    quotes = ["¬´–ë—É–¥—å —Å–æ–±–æ–π. –ü—Ä–æ—á–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.¬ª ‚Äì –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥", "¬´–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ 1% –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ 99% –ø–æ—Ç–∞.¬ª ‚Äì –≠–¥–∏—Å–æ–Ω"]
    bot.reply_to(message, random.choice(quotes))

@bot.message_handler(commands=['meme'])
def meme(message):
    memes = [
        "https://i.imgflip.com/4/4t0m5.jpg",
        "https://i.redd.it/qw3l1d9bx0v51.jpg"
    ]
    bot.send_photo(message.chat.id, random.choice(memes))

@bot.message_handler(commands=['cat'])
def cat(message):
    bot.send_photo(message.chat.id, "https://cataas.com/cat")

@bot.message_handler(commands=['dog'])
def dog(message):
    bot.send_photo(message.chat.id, "https://random.dog/woof.jpg")

@bot.message_handler(commands=['dice'])
def dice(message):
    bot.send_dice(message.chat.id)

# donke —Ä–µ–π—Ç–∏–Ω–≥
donke_stats = {}

@bot.message_handler(commands=['camdonke'])
def camdonke(message):
    user_id = message.from_user.id
    donke_stats[user_id] = donke_stats.get(user_id, 0) + 1
    bot.reply_to(message, f"üëä Donke +1! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {donke_stats[user_id]} –æ—á–∫–æ–≤ –¥–æ–Ω–∫–µ.")

@bot.message_handler(commands=['topdonke'])
def topdonke(message):
    if not donke_stats:
        return bot.reply_to(message, "üòê –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ donke.")
    top = sorted(donke_stats.items(), key=lambda x: x[1], reverse=True)[:5]
    leaderboard = [f"{i+1}. {bot.get_chat_member(message.chat.id, uid).user.first_name} ‚Äî {score}" for i, (uid, score) in enumerate(top)]
    bot.send_message(message.chat.id, "üèÜ –¢–æ–ø Donke:\n" + "\n".join(leaderboard))

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
def download_video(message):
    url = message.text.strip()
    api = "https://api.savetube.me/info"
    headers = {"X-API-KEY": SAVE_TUBE_API_KEY}
    try:
        r = requests.post(api, json={"url": url}, headers=headers)
        data = r.json()
        video_url = data["medias"][0]["url"]
        title = data.get("title", "–í–∏–¥–µ–æ")
        bot.send_message(message.chat.id, f"üé¨ {title}\n{video_url}")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")

# Flask —Ö—É–∫
@app.route('/', methods=['POST'])
def webhook():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "OK", 200

@app.route('/')
def root():
    return 'MultiBotX —Ä–∞–±–æ—Ç–∞–µ—Ç!'

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))