import os
import logging
from flask import Flask, request
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ChatPermissions
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ContextTypes
)
from telegram.constants import ParseMode
from yt_dlp import YoutubeDL
from datetime import datetime, timedelta
import asyncio
import re
import random
import requests

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –¢–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.environ.get("PORT", 8443))
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# –°–ª–æ–≤–∞—Ä—å –∫–∞—Å—Ç –∞–¥–º–∏–Ω–æ–≤
admin_ranks = {}  # {chat_id: {user_id: "Supreme"|"Commander"|...}}

RANKS = ["Default", "Guard", "Captain", "Commander", "Supreme"]
RANK_EMOJIS = {
    "Supreme": "üëë", "Commander": "ü¶æ",
    "Captain": "‚öîÔ∏è", "Guard": "üõ°", "Default": "üë§"
}

# –ü—Ä–∞–≤–∞ –¥–ª—è –º—É—Ç–∞
NO_PERMISSIONS = ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_change_info=False,
    can_invite_users=False,
    can_pin_messages=False
)

# –°—Ç–∞—Ç—É—Å—ã
antimat_status = {}  # {chat_id: True/False}# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [KeyboardButton("üé≤ –ö—É–±–∏–∫"), KeyboardButton("üì∏ –ú–µ–º")],
        [KeyboardButton("üò∏ –ö–æ—Ç"), KeyboardButton("üê∂ –ü—ë—Å")],
        [KeyboardButton("üß† –§–∞–∫—Ç"), KeyboardButton("üí¨ –¶–∏—Ç–∞—Ç–∞")],
        [KeyboardButton("üé≠ –®—É—Ç–∫–∞"), KeyboardButton("ü§¨ Donke")],
        [KeyboardButton("üì• YouTube"), KeyboardButton("üì• TikTok")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>!\n\n"
        f"–Ø <b>MultiBotX</b> ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π, –º–µ–º–∞–º–∏, –≤–∏–¥–µ–æ, AI –∏ —à—É—Ç–∫–∞–º–∏.",
        reply_markup=get_main_menu()
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫\n"
        "/help ‚Äî –ü–æ–º–æ—â—å\n"
        "/warn, /mute, /ban ‚Äî –ú–æ–¥–µ—Ä–∞—Ü–∏—è\n"
        "/unmute, /unban ‚Äî –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
        "/remindme ‚Äî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "üì© –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube/TikTok –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É"
    )

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å JOKES, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:
    JOKES = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ø–ª–∞—á—É—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç try.",
        "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–æ–ª—å –≤–æ—Å—å–º—ë—Ä–∫–µ? –ö–ª–∞—Å—Å–Ω—ã–π –ø–æ—è—Å!",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ 10 —Ç–∏–ø–æ–≤: —Ç–µ—Ö, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥, –∏ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ—Ç."
    ]
FACTS = [
    "üêô –û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "üåã –ù–∞ –í–µ–Ω–µ—Ä–µ –¥–µ–Ω—å –¥–ª–∏–Ω–Ω–µ–µ –≥–æ–¥–∞.",
    "üí° –ü–µ—Ä–≤—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –±—ã–ª–∞ –∂–µ–Ω—â–∏–Ω–∞ ‚Äî –ê–¥–∞ –õ–∞–≤–ª–µ–π—Å."
]

QUOTES = [
    "üí¨ ¬´–ë—É–¥—å —Å–æ–±–æ–π ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.¬ª ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
    "üí¨ ¬´–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ 10% —Ç–æ–≥–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∏ 90% ‚Äî –∫–∞–∫ —Ç—ã –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä—É–µ—à—å.¬ª"
]

DONKE_JOKES = [
    "Donke –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≥–ª—É–ø, —á—Ç–æ –¥—É–º–∞–µ—Ç, —á—Ç–æ GPT ‚Äî —ç—Ç–æ GPS —Å –æ—à–∏–±–∫–æ–π.",
    "Donke –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å system32 –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ‚Ä¶",
    "Donke –∏–≥—Ä–∞–µ—Ç –≤ —à–∞—Ö–º–∞—Ç—ã —Å –≥–æ–ª—É–±—è–º–∏ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç –∏ –æ–±–æ—Å—Ä—ë—Ç –¥–æ—Å–∫—É."
]

async def handle_fun_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "–º–µ–º" in text:
        await send_random_meme(update)
    elif "—à—É—Ç–∫" in text:
        await update.message.reply_text(random.choice(JOKES))
    elif "—Ñ–∞–∫—Ç" in text:
        await update.message.reply_text(random.choice(FACTS))
    elif "—Ü–∏—Ç–∞—Ç" in text:
        await update.message.reply_text(random.choice(QUOTES))
    elif "donke" in text:
        await update.message.reply_text(random.choice(DONKE_JOKES))
    elif "–∫–æ—Ç" in text:
        await send_photo(update, "https://cataas.com/cat")
    elif "–ø—ë—Å" in text or "—Å–æ–±–∞–∫" in text:
        await send_photo(update, "https://random.dog/woof.json", json_key="url")
    elif "–∫—É–±–∏–∫" in text:
        await update.message.reply_dice()async def send_photo(update: Update, url: str, json_key: str = None):
    try:
        if json_key:
            response = requests.get(url).json()
            photo_url = response[json_key]
        else:
            photo_url = url
        await update.message.reply_photo(photo_url)
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

async def send_random_meme(update: Update):
    try:
        meme_url = f"https://meme-api.com/gimme"
        data = requests.get(meme_url).json()
        await update.message.reply_photo(data["url"], caption=data["title"])
    except:
        await update.message.reply_text("‚ö†Ô∏è –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")async def warn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")

async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º—É—Ç–∞.")
    until_date = datetime.now() + timedelta(minutes=60)
    await context.bot.restrict_chat_member(
        update.effective_chat.id,
        update.message.reply_to_message.from_user.id,
        permissions=NO_PERMISSIONS,
        until_date=until_date
    )
    await update.message.reply_text("üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 60 –º–∏–Ω—É—Ç.")

async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º—å—é—Ç–∞.")
    await context.bot.restrict_chat_member(
        update.effective_chat.id,
        update.message.reply_to_message.from_user.id,
        permissions=ChatPermissions(can_send_messages=True)
    )
    await update.message.reply_text("üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—å—é—á–µ–Ω.")

async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∞–Ω–∞.")
    await update.message.chat.ban_member(update.message.reply_to_message.from_user.id)
    await update.message.reply_text("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")

async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è.")
    await update.message.chat.unban_member(update.message.reply_to_message.from_user.id)
    await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")# === –ö–æ–º–∞–Ω–¥–∞ /remindme ===
from datetime import datetime, timedelta
import asyncio

user_reminders = {}

async def remindme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remindme [—á–µ—Ä–µ–∑_–≤—Ä–µ–º—è] [–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /remindme 10m –í—ã–ø–∏—Ç—å –≤–æ–¥—É")
            return

        delay_str = args[0]
        reminder_text = " ".join(args[1:])

        delay = parse_delay(delay_str)
        if delay is None:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '10s', '5m', '2h', –∏ —Ç.–ø.")
            return

        await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {delay_str}: {reminder_text}")

        user_id = update.effective_user.id
        reminder_time = datetime.now() + delay
        if user_id not in user_reminders:
            user_reminders[user_id] = []
        user_reminders[user_id].append((reminder_time, reminder_text))

        asyncio.create_task(schedule_reminder(context.bot, update.effective_chat.id, delay.total_seconds(), reminder_text))

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ remindme:", e)

def parse_delay(time_str):
    try:
        unit = time_str[-1]
        amount = int(time_str[:-1])
        if unit == "s":
            return timedelta(seconds=amount)
        elif unit == "m":
            return timedelta(minutes=amount)
        elif unit == "h":
            return timedelta(hours=amount)
        else:
            return None
    except:
        return None

async def schedule_reminder(bot: Bot, chat_id: int, delay: float, text: str):
    await asyncio.sleep(delay)
    try:
        await bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", e)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@restricted
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = update.message.text.lower()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if contains_profanity(text):
        try:
            await update.message.delete()
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.")
        except:
            pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤ –±–µ–∑ "/"
    if update.message.reply_to_message:
        replied_user = update.message.reply_to_message.from_user.id
        if "–º—É—Ç" in text:
            await mute_user(update, context, replied_user)
        elif "—Ä–∞–∑–º—É—Ç" in text or "–∞–Ω–º—É—Ç" in text:
            await unmute_user(update, context, replied_user)
        elif "–≤–∞—Ä–Ω" in text:
            await warn_user(update, context, replied_user)
        elif "–±–∞–Ω" in text:
            await ban_user(update, context, replied_user)
        elif "—Ä–∞–∑–±–∞–Ω" in text or "–∞–Ω–±–∞–Ω" in text or "—É–Ω–±–∞–Ω" in text:
            await unban_user(update, context, replied_user)

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
def build_application():
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("fact", fact_command))
    application.add_handler(CommandHandler("quote", quote_command))
    application.add_handler(CommandHandler("cat", cat_command))
    application.add_handler(CommandHandler("dog", dog_command))
    application.add_handler(CommandHandler("meme", meme_command))
    application.add_handler(CommandHandler("dice", dice_command))
    application.add_handler(CommandHandler("donke", donke_command))
    application.add_handler(CommandHandler("topdonke", topdonke_command))
    application.add_handler(CommandHandler("camdonke", camdonke_command))
    application.add_handler(CommandHandler("yt", yt_command))
    application.add_handler(CommandHandler("tt", tt_command))
    application.add_handler(CommandHandler("remindme", remindme))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    return application# === Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞ Render.com ===
import threading
from flask import Flask, request

flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return 'ü§ñ MultiBotX —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@flask_app.route('/webhook', methods=['POST'])
def webhook():
    return "Webhook endpoint"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    import asyncio

    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    app = build_application()
    asyncio.run(app.initialize())
    app.run_polling()